{"ast":null,"code":"module.exports = dragDrop;\n\nvar flatten = require('flatten');\n\nvar parallel = require('run-parallel');\n\nfunction dragDrop(elem, listeners) {\n  if (typeof elem === 'string') {\n    var selector = elem;\n    elem = window.document.querySelector(elem);\n\n    if (!elem) {\n      throw new Error('\"' + selector + '\" does not match any HTML elements');\n    }\n  }\n\n  if (!elem) {\n    throw new Error('\"' + elem + '\" is not a valid HTML element');\n  }\n\n  if (typeof listeners === 'function') {\n    listeners = {\n      onDrop: listeners\n    };\n  }\n\n  var timeout;\n  elem.addEventListener('dragenter', onDragEnter, false);\n  elem.addEventListener('dragover', onDragOver, false);\n  elem.addEventListener('dragleave', onDragLeave, false);\n  elem.addEventListener('drop', onDrop, false); // Function to remove drag-drop listeners\n\n  return function remove() {\n    removeDragClass();\n    elem.removeEventListener('dragenter', onDragEnter, false);\n    elem.removeEventListener('dragover', onDragOver, false);\n    elem.removeEventListener('dragleave', onDragLeave, false);\n    elem.removeEventListener('drop', onDrop, false);\n  };\n\n  function onDragEnter(e) {\n    if (listeners.onDragEnter) {\n      listeners.onDragEnter(e);\n    } // Prevent event\n\n\n    e.stopPropagation();\n    e.preventDefault();\n    return false;\n  }\n\n  function onDragOver(e) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    if (e.dataTransfer.items) {\n      // Only add \"drag\" class when `items` contains items that are able to be\n      // handled by the registered listeners (files vs. text)\n      var items = toArray(e.dataTransfer.items);\n      var fileItems = items.filter(function (item) {\n        return item.kind === 'file';\n      });\n      var textItems = items.filter(function (item) {\n        return item.kind === 'string';\n      });\n      if (fileItems.length === 0 && !listeners.onDropText) return;\n      if (textItems.length === 0 && !listeners.onDrop) return;\n      if (fileItems.length === 0 && textItems.length === 0) return;\n    }\n\n    elem.classList.add('drag');\n    clearTimeout(timeout);\n\n    if (listeners.onDragOver) {\n      listeners.onDragOver(e);\n    }\n\n    e.dataTransfer.dropEffect = 'copy';\n    return false;\n  }\n\n  function onDragLeave(e) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    if (listeners.onDragLeave) {\n      listeners.onDragLeave(e);\n    }\n\n    clearTimeout(timeout);\n    timeout = setTimeout(removeDragClass, 50);\n    return false;\n  }\n\n  function onDrop(e) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    if (listeners.onDragLeave) {\n      listeners.onDragLeave(e);\n    }\n\n    clearTimeout(timeout);\n    removeDragClass();\n    var pos = {\n      x: e.clientX,\n      y: e.clientY // text drop support\n\n    };\n    var text = e.dataTransfer.getData('text');\n\n    if (text && listeners.onDropText) {\n      listeners.onDropText(text, pos);\n    } // file drop support\n\n\n    if (e.dataTransfer.items) {\n      // Handle directories in Chrome using the proprietary FileSystem API\n      var items = toArray(e.dataTransfer.items).filter(function (item) {\n        return item.kind === 'file';\n      });\n      if (items.length === 0) return;\n      parallel(items.map(function (item) {\n        return function (cb) {\n          processEntry(item.webkitGetAsEntry(), cb);\n        };\n      }), function (err, results) {\n        // This catches permission errors with file:// in Chrome. This should never\n        // throw in production code, so the user does not need to use try-catch.\n        if (err) throw err;\n\n        if (listeners.onDrop) {\n          listeners.onDrop(flatten(results), pos);\n        }\n      });\n    } else {\n      var files = toArray(e.dataTransfer.files);\n      if (files.length === 0) return;\n      files.forEach(function (file) {\n        file.fullPath = '/' + file.name;\n      });\n\n      if (listeners.onDrop) {\n        listeners.onDrop(files, pos);\n      }\n    }\n\n    return false;\n  }\n\n  function removeDragClass() {\n    elem.classList.remove('drag');\n  }\n}\n\nfunction processEntry(entry, cb) {\n  var entries = [];\n\n  if (entry.isFile) {\n    entry.file(function (file) {\n      file.fullPath = entry.fullPath; // preserve pathing for consumer\n\n      cb(null, file);\n    }, function (err) {\n      cb(err);\n    });\n  } else if (entry.isDirectory) {\n    var reader = entry.createReader();\n    readEntries();\n  }\n\n  function readEntries() {\n    reader.readEntries(function (entries_) {\n      if (entries_.length > 0) {\n        entries = entries.concat(toArray(entries_));\n        readEntries(); // continue reading entries until `readEntries` returns no more\n      } else {\n        doneEntries();\n      }\n    });\n  }\n\n  function doneEntries() {\n    parallel(entries.map(function (entry) {\n      return function (cb) {\n        processEntry(entry, cb);\n      };\n    }), cb);\n  }\n}\n\nfunction toArray(list) {\n  return Array.prototype.slice.call(list || [], 0);\n}","map":null,"metadata":{},"sourceType":"script"}