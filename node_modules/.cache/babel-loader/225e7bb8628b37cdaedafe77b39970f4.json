{"ast":null,"code":"var _require = require('preact'),\n    h = _require.h;\n\nvar uploadStates = {\n  'STATE_ERROR': 'error',\n  'STATE_WAITING': 'waiting',\n  'STATE_PREPROCESSING': 'preprocessing',\n  'STATE_UPLOADING': 'uploading',\n  'STATE_POSTPROCESSING': 'postprocessing',\n  'STATE_COMPLETE': 'complete',\n  'STATE_PAUSED': 'paused'\n};\n\nfunction getUploadingState(isAllErrored, isAllComplete, isAllPaused) {\n  var files = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  if (isAllErrored) {\n    return uploadStates.STATE_ERROR;\n  }\n\n  if (isAllComplete) {\n    return uploadStates.STATE_COMPLETE;\n  }\n\n  if (isAllPaused) {\n    return uploadStates.STATE_PAUSED;\n  }\n\n  var state = uploadStates.STATE_WAITING;\n  var fileIDs = Object.keys(files);\n\n  for (var i = 0; i < fileIDs.length; i++) {\n    var progress = files[fileIDs[i]].progress; // If ANY files are being uploaded right now, show the uploading state.\n\n    if (progress.uploadStarted && !progress.uploadComplete) {\n      return uploadStates.STATE_UPLOADING;\n    } // If files are being preprocessed AND postprocessed at this time, we show the\n    // preprocess state. If any files are being uploaded we show uploading.\n\n\n    if (progress.preprocess && state !== uploadStates.STATE_UPLOADING) {\n      state = uploadStates.STATE_PREPROCESSING;\n    } // If NO files are being preprocessed or uploaded right now, but some files are\n    // being postprocessed, show the postprocess state.\n\n\n    if (progress.postprocess && state !== uploadStates.STATE_UPLOADING && state !== uploadStates.STATE_PREPROCESSING) {\n      state = uploadStates.STATE_POSTPROCESSING;\n    }\n  }\n\n  return state;\n}\n\nfunction UploadStatus(props) {\n  var uploadingState = getUploadingState(props.isAllErrored, props.isAllComplete, props.isAllPaused, props.files);\n\n  switch (uploadingState) {\n    case 'uploading':\n      return props.i18n('uploadingXFiles', {\n        smart_count: props.inProgressNotPausedFiles.length\n      });\n\n    case 'preprocessing':\n    case 'postprocessing':\n      return props.i18n('processingXFiles', {\n        smart_count: props.processingFiles.length\n      });\n\n    case 'paused':\n      return props.i18n('uploadPaused');\n\n    case 'waiting':\n      return props.i18n('xFilesSelected', {\n        smart_count: props.newFiles.length\n      });\n\n    case 'complete':\n      return props.i18n('uploadComplete');\n  }\n}\n\nfunction PanelTopBar(props) {\n  var allowNewUpload = props.allowNewUpload; // TODO maybe this should be done in ../index.js, then just pass that down as `allowNewUpload`\n\n  if (allowNewUpload && props.maxNumberOfFiles) {\n    allowNewUpload = props.totalFileCount < props.maxNumberOfFiles;\n  }\n\n  return h('div', {\n    'class': 'uppy-DashboardContent-bar'\n  }, h('div', null, !props.isAllComplete ? h('button', {\n    'class': 'uppy-DashboardContent-back',\n    type: 'button',\n    onclick: props.cancelAll\n  }, props.i18n('cancel')) : null), h('div', {\n    'class': 'uppy-DashboardContent-title',\n    role: 'heading',\n    'aria-level': 'h1'\n  }, h(UploadStatus, props)), allowNewUpload && h('button', {\n    'class': 'uppy-DashboardContent-addMore',\n    type: 'button',\n    'aria-label': props.i18n('addMoreFiles'),\n    title: props.i18n('addMoreFiles'),\n    onclick: function onclick() {\n      return props.toggleAddFilesPanel(true);\n    }\n  }, h('svg', {\n    'class': 'UppyIcon',\n    width: '15',\n    height: '15',\n    viewBox: '0 0 13 13',\n    version: '1.1',\n    xmlns: 'http://www.w3.org/2000/svg'\n  }, h('path', {\n    d: 'M7,6 L13,6 L13,7 L7,7 L7,13 L6,13 L6,7 L0,7 L0,6 L6,6 L6,0 L7,0 L7,6 Z'\n  }))));\n}\n\nmodule.exports = PanelTopBar;","map":null,"metadata":{},"sourceType":"script"}