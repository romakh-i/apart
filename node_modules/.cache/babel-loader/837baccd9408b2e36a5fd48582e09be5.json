{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _require = require('@uppy/core'),\n    Plugin = _require.Plugin;\n\nvar Translator = require('@uppy/utils/lib/Translator');\n\nvar toArray = require('@uppy/utils/lib/toArray');\n\nvar dragDrop = require('drag-drop');\n\nvar _require2 = require('preact'),\n    h = _require2.h;\n/**\n * Drag & Drop plugin\n *\n */\n\n\nmodule.exports = function (_Plugin) {\n  _inherits(DragDrop, _Plugin);\n\n  function DragDrop(uppy, opts) {\n    _classCallCheck(this, DragDrop);\n\n    var _this = _possibleConstructorReturn(this, _Plugin.call(this, uppy, opts));\n\n    _this.type = 'acquirer';\n    _this.id = _this.opts.id || 'DragDrop';\n    _this.title = 'Drag & Drop';\n    var defaultLocale = {\n      strings: {\n        dropHereOr: 'Drop files here or %{browse}',\n        browse: 'browse' // Default options\n\n      }\n    };\n    var defaultOpts = {\n      target: null,\n      inputName: 'files[]',\n      width: '100%',\n      height: '100%',\n      note: null,\n      locale: defaultLocale // Merge default options with the ones set by user\n\n    };\n    _this.opts = _extends({}, defaultOpts, opts); // Check for browser dragDrop support\n\n    _this.isDragDropSupported = _this.checkDragDropSupport(); // i18n\n\n    _this.translator = new Translator([defaultLocale, _this.uppy.locale, _this.opts.locale]);\n    _this.i18n = _this.translator.translate.bind(_this.translator);\n    _this.i18nArray = _this.translator.translateArray.bind(_this.translator); // Bind `this` to class methods\n\n    _this.handleDrop = _this.handleDrop.bind(_this);\n    _this.handleInputChange = _this.handleInputChange.bind(_this);\n    _this.checkDragDropSupport = _this.checkDragDropSupport.bind(_this);\n    _this.render = _this.render.bind(_this);\n    return _this;\n  }\n  /**\n   * Checks if the browser supports Drag & Drop (not supported on mobile devices, for example).\n   * @return {Boolean}\n   */\n\n\n  DragDrop.prototype.checkDragDropSupport = function checkDragDropSupport() {\n    var div = document.createElement('div');\n\n    if (!('draggable' in div) || !('ondragstart' in div && 'ondrop' in div)) {\n      return false;\n    }\n\n    if (!('FormData' in window)) {\n      return false;\n    }\n\n    if (!('FileReader' in window)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  DragDrop.prototype.handleDrop = function handleDrop(files) {\n    var _this2 = this;\n\n    this.uppy.log('[DragDrop] Files dropped');\n    files.forEach(function (file) {\n      try {\n        _this2.uppy.addFile({\n          source: _this2.id,\n          name: file.name,\n          type: file.type,\n          data: file\n        });\n      } catch (err) {// Nothing, restriction errors handled in Core\n      }\n    });\n  };\n\n  DragDrop.prototype.handleInputChange = function handleInputChange(ev) {\n    var _this3 = this;\n\n    this.uppy.log('[DragDrop] Files selected through input');\n    var files = toArray(ev.target.files);\n    files.forEach(function (file) {\n      try {\n        _this3.uppy.addFile({\n          source: _this3.id,\n          name: file.name,\n          type: file.type,\n          data: file\n        });\n      } catch (err) {// Nothing, restriction errors handled in Core\n      }\n    });\n  };\n\n  DragDrop.prototype.render = function render(state) {\n    var _this4 = this;\n    /* http://tympanus.net/codrops/2015/09/15/styling-customizing-file-inputs-smart-way/ */\n\n\n    var hiddenInputStyle = {\n      width: '0.1px',\n      height: '0.1px',\n      opacity: 0,\n      overflow: 'hidden',\n      position: 'absolute',\n      zIndex: -1\n    };\n    var DragDropClass = 'uppy-Root uppy-DragDrop-container ' + (this.isDragDropSupported ? 'uppy-DragDrop--is-dragdrop-supported' : '');\n    var DragDropStyle = {\n      width: this.opts.width,\n      height: this.opts.height\n    };\n    var restrictions = this.uppy.opts.restrictions; // empty value=\"\" on file input, so that the input is cleared after a file is selected,\n    // because Uppy will be handling the upload and so we can select same file\n    // after removing — otherwise browser thinks it’s already selected\n\n    return h('div', {\n      'class': DragDropClass,\n      style: DragDropStyle\n    }, h('div', {\n      'class': 'uppy-DragDrop-inner'\n    }, h('svg', {\n      'aria-hidden': 'true',\n      'class': 'UppyIcon uppy-DragDrop-arrow',\n      width: '16',\n      height: '16',\n      viewBox: '0 0 16 16',\n      xmlns: 'http://www.w3.org/2000/svg'\n    }, h('path', {\n      d: 'M11 10V0H5v10H2l6 6 6-6h-3zm0 0',\n      'fill-rule': 'evenodd'\n    })), h('label', {\n      'class': 'uppy-DragDrop-label'\n    }, h('input', {\n      style: hiddenInputStyle,\n      'class': 'uppy-DragDrop-input',\n      type: 'file',\n      name: this.opts.inputName,\n      multiple: restrictions.maxNumberOfFiles !== 1,\n      accept: restrictions.allowedFileTypes,\n      ref: function ref(input) {\n        _this4.input = input;\n      },\n      onchange: this.handleInputChange,\n      value: ''\n    }), this.i18nArray('dropHereOr', {\n      browse: h('span', {\n        'class': 'uppy-DragDrop-dragText'\n      }, this.i18n('browse'))\n    })), h('span', {\n      'class': 'uppy-DragDrop-note'\n    }, this.opts.note)));\n  };\n\n  DragDrop.prototype.install = function install() {\n    var _this5 = this;\n\n    var target = this.opts.target;\n\n    if (target) {\n      this.mount(target, this);\n    }\n\n    this.removeDragDropListener = dragDrop(this.el, function (files) {\n      _this5.handleDrop(files);\n\n      _this5.uppy.log(files);\n    });\n  };\n\n  DragDrop.prototype.uninstall = function uninstall() {\n    this.unmount();\n    this.removeDragDropListener();\n  };\n\n  return DragDrop;\n}(Plugin);","map":null,"metadata":{},"sourceType":"script"}