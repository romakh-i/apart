{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _require = require('@uppy/core'),\n    Plugin = _require.Plugin;\n\nvar Translator = require('@uppy/utils/lib/Translator');\n\nvar dragDrop = require('drag-drop');\n\nvar DashboardUI = require('./components/Dashboard');\n\nvar StatusBar = require('@uppy/status-bar');\n\nvar Informer = require('@uppy/informer');\n\nvar ThumbnailGenerator = require('@uppy/thumbnail-generator');\n\nvar findAllDOMElements = require('@uppy/utils/lib/findAllDOMElements');\n\nvar toArray = require('@uppy/utils/lib/toArray');\n\nvar cuid = require('cuid'); // const prettyBytes = require('prettier-bytes')\n\n\nvar ResizeObserver = require('resize-observer-polyfill').default || require('resize-observer-polyfill');\n\nvar _require2 = require('./components/icons'),\n    defaultTabIcon = _require2.defaultTabIcon; // Some code for managing focus was adopted from https://github.com/ghosh/micromodal\n// MIT licence, https://github.com/ghosh/micromodal/blob/master/LICENSE.md\n// Copyright (c) 2017 Indrashish Ghosh\n\n\nvar FOCUSABLE_ELEMENTS = ['a[href]:not([tabindex^=\"-\"]):not([inert]):not([aria-hidden])', 'area[href]:not([tabindex^=\"-\"]):not([inert]):not([aria-hidden])', 'input:not([disabled]):not([inert]):not([aria-hidden])', 'select:not([disabled]):not([inert]):not([aria-hidden])', 'textarea:not([disabled]):not([inert]):not([aria-hidden])', 'button:not([disabled]):not([inert]):not([aria-hidden])', 'iframe:not([tabindex^=\"-\"]):not([inert]):not([aria-hidden])', 'object:not([tabindex^=\"-\"]):not([inert]):not([aria-hidden])', 'embed:not([tabindex^=\"-\"]):not([inert]):not([aria-hidden])', '[contenteditable]:not([tabindex^=\"-\"]):not([inert]):not([aria-hidden])', '[tabindex]:not([tabindex^=\"-\"]):not([inert]):not([aria-hidden])'];\nvar TAB_KEY = 9;\nvar ESC_KEY = 27;\n\nfunction createPromise() {\n  var o = {};\n  o.promise = new Promise(function (resolve, reject) {\n    o.resolve = resolve;\n    o.reject = reject;\n  });\n  return o;\n}\n/**\n * Dashboard UI with previews, metadata editing, tabs for various services and more\n */\n\n\nmodule.exports = function (_Plugin) {\n  _inherits(Dashboard, _Plugin);\n\n  function Dashboard(uppy, opts) {\n    _classCallCheck(this, Dashboard);\n\n    var _this = _possibleConstructorReturn(this, _Plugin.call(this, uppy, opts));\n\n    _this.id = _this.opts.id || 'Dashboard';\n    _this.title = 'Dashboard';\n    _this.type = 'orchestrator';\n    _this.modalName = 'uppy-Dashboard-' + cuid();\n    var defaultLocale = {\n      strings: {\n        selectToUpload: 'Select files to upload',\n        closeModal: 'Close Modal',\n        upload: 'Upload',\n        importFrom: 'Import from %{name}',\n        addingMoreFiles: 'Adding more files',\n        addMoreFiles: 'Add more files',\n        dashboardWindowTitle: 'Uppy Dashboard Window (Press escape to close)',\n        dashboardTitle: 'Uppy Dashboard',\n        copyLinkToClipboardSuccess: 'Link copied to clipboard',\n        copyLinkToClipboardFallback: 'Copy the URL below',\n        copyLink: 'Copy link',\n        fileSource: 'File source: %{name}',\n        done: 'Done',\n        back: 'Back',\n        name: 'Name',\n        removeFile: 'Remove file',\n        editFile: 'Edit file',\n        editing: 'Editing %{file}',\n        edit: 'Edit',\n        finishEditingFile: 'Finish editing file',\n        saveChanges: 'Save changes',\n        cancel: 'Cancel',\n        localDisk: 'Local Disk',\n        myDevice: 'My Device',\n        dropPasteImport: 'Drop files here, paste, %{browse} or import from',\n        dropPaste: 'Drop files here, paste or %{browse}',\n        browse: 'browse',\n        fileProgress: 'File progress: upload speed and ETA',\n        numberOfSelectedFiles: 'Number of selected files',\n        uploadAllNewFiles: 'Upload all new files',\n        emptyFolderAdded: 'No files were added from empty folder',\n        uploadComplete: 'Upload complete',\n        uploadPaused: 'Upload paused',\n        resumeUpload: 'Resume upload',\n        pauseUpload: 'Pause upload',\n        retryUpload: 'Retry upload',\n        cancelUpload: 'Cancel upload',\n        xFilesSelected: {\n          0: '%{smart_count} file selected',\n          1: '%{smart_count} files selected'\n        },\n        uploadXFiles: {\n          0: 'Upload %{smart_count} file',\n          1: 'Upload %{smart_count} files'\n        },\n        uploadingXFiles: {\n          0: 'Uploading %{smart_count} file',\n          1: 'Uploading %{smart_count} files'\n        },\n        processingXFiles: {\n          0: 'Processing %{smart_count} file',\n          1: 'Processing %{smart_count} files'\n        },\n        uploadXNewFiles: {\n          0: 'Upload +%{smart_count} file',\n          1: 'Upload +%{smart_count} files'\n        },\n        folderAdded: {\n          0: 'Added %{smart_count} file from %{folder}',\n          1: 'Added %{smart_count} files from %{folder}'\n        } // set default options\n\n      }\n    };\n    var defaultOptions = {\n      target: 'body',\n      metaFields: [],\n      trigger: '#uppy-select-files',\n      inline: false,\n      width: 750,\n      height: 550,\n      thumbnailWidth: 280,\n      defaultTabIcon: defaultTabIcon,\n      showLinkToFileUploadResult: true,\n      showProgressDetails: false,\n      hideUploadButton: false,\n      hideRetryButton: false,\n      hidePauseResumeCancelButtons: false,\n      hideProgressAfterFinish: false,\n      note: null,\n      closeModalOnClickOutside: false,\n      closeAfterFinish: false,\n      disableStatusBar: false,\n      disableInformer: false,\n      disableThumbnailGenerator: false,\n      disablePageScrollWhenModalOpen: true,\n      animateOpenClose: true,\n      proudlyDisplayPoweredByUppy: true,\n      onRequestCloseModal: function onRequestCloseModal() {\n        return _this.closeModal();\n      },\n      showSelectedFiles: true,\n      // locale: defaultLocale,\n      browserBackButtonClose: false // merge default options with the ones set by user\n\n    };\n    _this.opts = _extends({}, defaultOptions, opts); // i18n\n\n    _this.translator = new Translator([defaultLocale, _this.uppy.locale, _this.opts.locale]);\n    _this.i18n = _this.translator.translate.bind(_this.translator);\n    _this.i18nArray = _this.translator.translateArray.bind(_this.translator);\n    _this.openModal = _this.openModal.bind(_this);\n    _this.closeModal = _this.closeModal.bind(_this);\n    _this.requestCloseModal = _this.requestCloseModal.bind(_this);\n    _this.isModalOpen = _this.isModalOpen.bind(_this);\n    _this.addTarget = _this.addTarget.bind(_this);\n    _this.removeTarget = _this.removeTarget.bind(_this);\n    _this.hideAllPanels = _this.hideAllPanels.bind(_this);\n    _this.showPanel = _this.showPanel.bind(_this);\n    _this.getFocusableNodes = _this.getFocusableNodes.bind(_this);\n    _this.setFocusToFirstNode = _this.setFocusToFirstNode.bind(_this);\n    _this.handlePopState = _this.handlePopState.bind(_this);\n    _this.maintainFocus = _this.maintainFocus.bind(_this);\n    _this.initEvents = _this.initEvents.bind(_this);\n    _this.handleKeyDown = _this.handleKeyDown.bind(_this);\n    _this.handleFileAdded = _this.handleFileAdded.bind(_this);\n    _this.handleComplete = _this.handleComplete.bind(_this);\n    _this.handleClickOutside = _this.handleClickOutside.bind(_this);\n    _this.toggleFileCard = _this.toggleFileCard.bind(_this);\n    _this.toggleAddFilesPanel = _this.toggleAddFilesPanel.bind(_this);\n    _this.handleDrop = _this.handleDrop.bind(_this);\n    _this.handlePaste = _this.handlePaste.bind(_this);\n    _this.handleInputChange = _this.handleInputChange.bind(_this);\n    _this.render = _this.render.bind(_this);\n    _this.install = _this.install.bind(_this);\n    return _this;\n  }\n\n  Dashboard.prototype.removeTarget = function removeTarget(plugin) {\n    var pluginState = this.getPluginState(); // filter out the one we want to remove\n\n    var newTargets = pluginState.targets.filter(function (target) {\n      return target.id !== plugin.id;\n    });\n    this.setPluginState({\n      targets: newTargets\n    });\n  };\n\n  Dashboard.prototype.addTarget = function addTarget(plugin) {\n    var callerPluginId = plugin.id || plugin.constructor.name;\n    var callerPluginName = plugin.title || callerPluginId;\n    var callerPluginType = plugin.type;\n\n    if (callerPluginType !== 'acquirer' && callerPluginType !== 'progressindicator' && callerPluginType !== 'presenter') {\n      var msg = 'Dashboard: Modal can only be used by plugins of types: acquirer, progressindicator, presenter';\n      this.uppy.log(msg);\n      return;\n    }\n\n    var target = {\n      id: callerPluginId,\n      name: callerPluginName,\n      type: callerPluginType\n    };\n    var state = this.getPluginState();\n    var newTargets = state.targets.slice();\n    newTargets.push(target);\n    this.setPluginState({\n      targets: newTargets\n    });\n    return this.el;\n  };\n\n  Dashboard.prototype.hideAllPanels = function hideAllPanels() {\n    this.setPluginState({\n      activePanel: false,\n      showAddFilesPanel: false\n    });\n  };\n\n  Dashboard.prototype.showPanel = function showPanel(id) {\n    var _getPluginState = this.getPluginState(),\n        targets = _getPluginState.targets;\n\n    var activePanel = targets.filter(function (target) {\n      return target.type === 'acquirer' && target.id === id;\n    })[0];\n    this.setPluginState({\n      activePanel: activePanel\n    });\n  };\n\n  Dashboard.prototype.requestCloseModal = function requestCloseModal() {\n    if (this.opts.onRequestCloseModal) {\n      return this.opts.onRequestCloseModal();\n    } else {\n      this.closeModal();\n    }\n  };\n\n  Dashboard.prototype.getFocusableNodes = function getFocusableNodes() {\n    var nodes = this.el.querySelectorAll(FOCUSABLE_ELEMENTS);\n    return Object.keys(nodes).map(function (key) {\n      return nodes[key];\n    });\n  };\n\n  Dashboard.prototype.setFocusToFirstNode = function setFocusToFirstNode() {\n    var focusableNodes = this.getFocusableNodes();\n    if (focusableNodes.length) focusableNodes[0].focus();\n  };\n\n  Dashboard.prototype.updateBrowserHistory = function updateBrowserHistory() {\n    // Ensure history state does not already contain our modal name to avoid double-pushing\n    if (!history.state || !history.state[this.modalName]) {\n      var _extends2; // Push to history so that the page is not lost on browser back button press\n\n\n      history.pushState(_extends({}, history.state, (_extends2 = {}, _extends2[this.modalName] = true, _extends2)), '');\n    } // Listen for back button presses\n\n\n    window.addEventListener('popstate', this.handlePopState, false);\n  };\n\n  Dashboard.prototype.handlePopState = function handlePopState(event) {\n    // Close the modal if the history state no longer contains our modal name\n    if (this.isModalOpen() && (!event.state || !event.state[this.modalName])) {\n      this.closeModal({\n        manualClose: false\n      });\n    } // When the browser back button is pressed and uppy is now the latest entry in the history but the modal is closed, fix the history by removing the uppy history entry\n    // This occurs when another entry is added into the history state while the modal is open, and then the modal gets manually closed\n    // Solves PR #575 (https://github.com/transloadit/uppy/pull/575)\n\n\n    if (!this.isModalOpen() && event.state && event.state[this.modalName]) {\n      history.go(-1);\n    }\n  };\n\n  Dashboard.prototype.setFocusToBrowse = function setFocusToBrowse() {\n    var browseBtn = this.el.querySelector('.uppy-Dashboard-browse');\n    if (browseBtn) browseBtn.focus();\n  };\n\n  Dashboard.prototype.maintainFocus = function maintainFocus(event) {\n    var focusableNodes = this.getFocusableNodes();\n    var focusedItemIndex = focusableNodes.indexOf(document.activeElement);\n\n    if (event.shiftKey && focusedItemIndex === 0) {\n      focusableNodes[focusableNodes.length - 1].focus();\n      event.preventDefault();\n    }\n\n    if (!event.shiftKey && focusedItemIndex === focusableNodes.length - 1) {\n      focusableNodes[0].focus();\n      event.preventDefault();\n    }\n  };\n\n  Dashboard.prototype.openModal = function openModal() {\n    var _this2 = this;\n\n    var _createPromise = createPromise(),\n        promise = _createPromise.promise,\n        resolve = _createPromise.resolve; // save scroll position\n\n\n    this.savedScrollPosition = window.scrollY; // save active element, so we can restore focus when modal is closed\n\n    this.savedActiveElement = document.activeElement;\n\n    if (this.opts.disablePageScrollWhenModalOpen) {\n      document.body.classList.add('uppy-Dashboard-isFixed');\n    }\n\n    if (this.opts.animateOpenClose && this.getPluginState().isClosing) {\n      var handler = function handler() {\n        _this2.setPluginState({\n          isHidden: false\n        });\n\n        _this2.el.removeEventListener('animationend', handler, false);\n\n        resolve();\n      };\n\n      this.el.addEventListener('animationend', handler, false);\n    } else {\n      this.setPluginState({\n        isHidden: false\n      });\n      resolve();\n    }\n\n    if (this.opts.browserBackButtonClose) {\n      this.updateBrowserHistory();\n    } // handle ESC and TAB keys in modal dialog\n\n\n    document.addEventListener('keydown', this.handleKeyDown); // this.rerender(this.uppy.getState())\n\n    this.setFocusToBrowse();\n    return promise;\n  };\n\n  Dashboard.prototype.closeModal = function closeModal() {\n    var _this3 = this;\n\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _opts$manualClose = opts.manualClose,\n        manualClose = _opts$manualClose === undefined ? true : _opts$manualClose;\n\n    var _getPluginState2 = this.getPluginState(),\n        isHidden = _getPluginState2.isHidden,\n        isClosing = _getPluginState2.isClosing;\n\n    if (isHidden || isClosing) {\n      // short-circuit if animation is ongoing\n      return;\n    }\n\n    var _createPromise2 = createPromise(),\n        promise = _createPromise2.promise,\n        resolve = _createPromise2.resolve;\n\n    if (this.opts.disablePageScrollWhenModalOpen) {\n      document.body.classList.remove('uppy-Dashboard-isFixed');\n    }\n\n    if (this.opts.animateOpenClose) {\n      this.setPluginState({\n        isClosing: true\n      });\n\n      var handler = function handler() {\n        _this3.setPluginState({\n          isHidden: true,\n          isClosing: false\n        });\n\n        _this3.el.removeEventListener('animationend', handler, false);\n\n        resolve();\n      };\n\n      this.el.addEventListener('animationend', handler, false);\n    } else {\n      this.setPluginState({\n        isHidden: true\n      });\n      resolve();\n    } // handle ESC and TAB keys in modal dialog\n\n\n    document.removeEventListener('keydown', this.handleKeyDown);\n    this.savedActiveElement.focus();\n\n    if (manualClose) {\n      if (this.opts.browserBackButtonClose) {\n        // Make sure that the latest entry in the history state is our modal name\n        if (history.state && history.state[this.modalName]) {\n          // Go back in history to clear out the entry we created (ultimately closing the modal)\n          history.go(-1);\n        }\n      }\n    }\n\n    return promise;\n  };\n\n  Dashboard.prototype.isModalOpen = function isModalOpen() {\n    return !this.getPluginState().isHidden || false;\n  };\n\n  Dashboard.prototype.handleKeyDown = function handleKeyDown(event) {\n    // close modal on esc key press\n    if (event.keyCode === ESC_KEY) this.requestCloseModal(event); // maintainFocus on tab key press\n\n    if (event.keyCode === TAB_KEY) this.maintainFocus(event);\n  };\n\n  Dashboard.prototype.handleClickOutside = function handleClickOutside() {\n    if (this.opts.closeModalOnClickOutside) this.requestCloseModal();\n  };\n\n  Dashboard.prototype.handlePaste = function handlePaste(ev) {\n    var _this4 = this;\n\n    var files = toArray(ev.clipboardData.items);\n    files.forEach(function (file) {\n      if (file.kind !== 'file') return;\n      var blob = file.getAsFile();\n\n      if (!blob) {\n        _this4.uppy.log('[Dashboard] File pasted, but the file blob is empty');\n\n        _this4.uppy.info('Error pasting file', 'error');\n\n        return;\n      }\n\n      _this4.uppy.log('[Dashboard] File pasted');\n\n      try {\n        _this4.uppy.addFile({\n          source: _this4.id,\n          name: file.name,\n          type: file.type,\n          data: blob\n        });\n      } catch (err) {// Nothing, restriction errors handled in Core\n      }\n    });\n  };\n\n  Dashboard.prototype.handleInputChange = function handleInputChange(ev) {\n    var _this5 = this;\n\n    ev.preventDefault();\n    var files = toArray(ev.target.files);\n    files.forEach(function (file) {\n      try {\n        _this5.uppy.addFile({\n          source: _this5.id,\n          name: file.name,\n          type: file.type,\n          data: file\n        });\n      } catch (err) {// Nothing, restriction errors handled in Core\n      }\n    });\n  };\n\n  Dashboard.prototype.initEvents = function initEvents() {\n    var _this6 = this; // Modal open button\n\n\n    var showModalTrigger = findAllDOMElements(this.opts.trigger);\n\n    if (!this.opts.inline && showModalTrigger) {\n      showModalTrigger.forEach(function (trigger) {\n        return trigger.addEventListener('click', _this6.openModal);\n      });\n    }\n\n    if (!this.opts.inline && !showModalTrigger) {\n      this.uppy.log('Dashboard modal trigger not found. Make sure `trigger` is set in Dashboard options unless you are planning to call openModal() method yourself', 'error');\n    } // Drag Drop\n\n\n    this.removeDragDropListener = dragDrop(this.el, function (files) {\n      _this6.handleDrop(files);\n    }); // Watch for Dashboard container (`.uppy-Dashboard-inner`) resize\n    // and update containerWidth/containerHeight in plugin state accordingly\n\n    this.ro = new ResizeObserver(function (entries, observer) {\n      for (var _iterator = entries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref;\n\n        if (_isArray) {\n          if (_i >= _iterator.length) break;\n          _ref = _iterator[_i++];\n        } else {\n          _i = _iterator.next();\n          if (_i.done) break;\n          _ref = _i.value;\n        }\n\n        var entry = _ref;\n        var _entry$contentRect = entry.contentRect,\n            width = _entry$contentRect.width,\n            height = _entry$contentRect.height;\n\n        _this6.uppy.log('[Dashboard] resized: ' + width + ' / ' + height);\n\n        _this6.setPluginState({\n          containerWidth: width,\n          containerHeight: height\n        });\n      }\n    });\n    this.ro.observe(this.el.querySelector('.uppy-Dashboard-inner'));\n    this.uppy.on('plugin-remove', this.removeTarget);\n    this.uppy.on('file-added', this.handleFileAdded);\n    this.uppy.on('complete', this.handleComplete);\n  };\n\n  Dashboard.prototype.handleFileAdded = function handleFileAdded() {\n    this.hideAllPanels();\n  };\n\n  Dashboard.prototype.handleComplete = function handleComplete(_ref2) {\n    var failed = _ref2.failed,\n        uploadID = _ref2.uploadID;\n\n    if (this.opts.closeAfterFinish && failed.length === 0) {\n      // All uploads are done\n      this.requestCloseModal();\n    }\n  };\n\n  Dashboard.prototype.removeEvents = function removeEvents() {\n    var _this7 = this;\n\n    var showModalTrigger = findAllDOMElements(this.opts.trigger);\n\n    if (!this.opts.inline && showModalTrigger) {\n      showModalTrigger.forEach(function (trigger) {\n        return trigger.removeEventListener('click', _this7.openModal);\n      });\n    }\n\n    this.ro.unobserve(this.el.querySelector('.uppy-Dashboard-inner'));\n    this.removeDragDropListener(); // window.removeEventListener('resize', this.throttledUpdateDashboardElWidth)\n\n    window.removeEventListener('popstate', this.handlePopState, false);\n    this.uppy.off('plugin-remove', this.removeTarget);\n    this.uppy.off('file-added', this.handleFileAdded);\n    this.uppy.off('complete', this.handleComplete);\n  };\n\n  Dashboard.prototype.toggleFileCard = function toggleFileCard(fileId) {\n    this.setPluginState({\n      fileCardFor: fileId || false\n    });\n  };\n\n  Dashboard.prototype.toggleAddFilesPanel = function toggleAddFilesPanel(show) {\n    this.setPluginState({\n      showAddFilesPanel: show\n    });\n  };\n\n  Dashboard.prototype.handleDrop = function handleDrop(files) {\n    var _this8 = this;\n\n    this.uppy.log('[Dashboard] Files were dropped');\n    files.forEach(function (file) {\n      try {\n        _this8.uppy.addFile({\n          source: _this8.id,\n          name: file.name,\n          type: file.type,\n          data: file\n        });\n      } catch (err) {// Nothing, restriction errors handled in Core\n      }\n    });\n  };\n\n  Dashboard.prototype.render = function render(state) {\n    var _this9 = this;\n\n    var pluginState = this.getPluginState();\n    var files = state.files,\n        capabilities = state.capabilities,\n        allowNewUpload = state.allowNewUpload; // TODO: move this to Core, to share between Status Bar and Dashboard\n    // (and any other plugin that might need it, too)\n\n    var newFiles = Object.keys(files).filter(function (file) {\n      return !files[file].progress.uploadStarted;\n    });\n    var uploadStartedFiles = Object.keys(files).filter(function (file) {\n      return files[file].progress.uploadStarted;\n    });\n    var pausedFiles = Object.keys(files).filter(function (file) {\n      return files[file].isPaused;\n    });\n    var completeFiles = Object.keys(files).filter(function (file) {\n      return files[file].progress.uploadComplete;\n    });\n    var erroredFiles = Object.keys(files).filter(function (file) {\n      return files[file].error;\n    });\n    var inProgressFiles = Object.keys(files).filter(function (file) {\n      return !files[file].progress.uploadComplete && files[file].progress.uploadStarted;\n    });\n    var inProgressNotPausedFiles = inProgressFiles.filter(function (file) {\n      return !files[file].isPaused;\n    });\n    var processingFiles = Object.keys(files).filter(function (file) {\n      return files[file].progress.preprocess || files[file].progress.postprocess;\n    });\n    var isUploadStarted = uploadStartedFiles.length > 0;\n    var isAllComplete = state.totalProgress === 100 && completeFiles.length === Object.keys(files).length && processingFiles.length === 0;\n    var isAllErrored = isUploadStarted && erroredFiles.length === uploadStartedFiles.length;\n    var isAllPaused = inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length; // const isAllPaused = inProgressNotPausedFiles.length === 0 &&\n    //   !isAllComplete &&\n    //   !isAllErrored &&\n    //   uploadStartedFiles.length > 0\n    // let inProgressNotPausedFilesArray = []\n    // inProgressNotPausedFiles.forEach((file) => {\n    //   inProgressNotPausedFilesArray.push(files[file])\n    // })\n    // let totalSize = 0\n    // let totalUploadedSize = 0\n    // inProgressNotPausedFilesArray.forEach((file) => {\n    //   totalSize = totalSize + (file.progress.bytesTotal || 0)\n    //   totalUploadedSize = totalUploadedSize + (file.progress.bytesUploaded || 0)\n    // })\n    // totalSize = prettyBytes(totalSize)\n    // totalUploadedSize = prettyBytes(totalUploadedSize)\n\n    var attachRenderFunctionToTarget = function attachRenderFunctionToTarget(target) {\n      var plugin = _this9.uppy.getPlugin(target.id);\n\n      return _extends({}, target, {\n        icon: plugin.icon || _this9.opts.defaultTabIcon,\n        render: plugin.render\n      });\n    };\n\n    var isSupported = function isSupported(target) {\n      var plugin = _this9.uppy.getPlugin(target.id); // If the plugin does not provide a `supported` check, assume the plugin works everywhere.\n\n\n      if (typeof plugin.isSupported !== 'function') {\n        return true;\n      }\n\n      return plugin.isSupported();\n    };\n\n    var acquirers = pluginState.targets.filter(function (target) {\n      return target.type === 'acquirer' && isSupported(target);\n    }).map(attachRenderFunctionToTarget);\n    var progressindicators = pluginState.targets.filter(function (target) {\n      return target.type === 'progressindicator';\n    }).map(attachRenderFunctionToTarget);\n\n    var startUpload = function startUpload(ev) {\n      _this9.uppy.upload().catch(function (err) {\n        // Log error.\n        _this9.uppy.log(err.stack || err.message || err);\n      });\n    };\n\n    var cancelUpload = function cancelUpload(fileID) {\n      _this9.uppy.removeFile(fileID);\n    };\n\n    var saveFileCard = function saveFileCard(meta, fileID) {\n      _this9.uppy.setFileMeta(fileID, meta);\n\n      _this9.toggleFileCard();\n    };\n\n    return DashboardUI({\n      state: state,\n      modal: pluginState,\n      files: files,\n      newFiles: newFiles,\n      uploadStartedFiles: uploadStartedFiles,\n      completeFiles: completeFiles,\n      erroredFiles: erroredFiles,\n      inProgressFiles: inProgressFiles,\n      inProgressNotPausedFiles: inProgressNotPausedFiles,\n      processingFiles: processingFiles,\n      isUploadStarted: isUploadStarted,\n      isAllComplete: isAllComplete,\n      isAllErrored: isAllErrored,\n      isAllPaused: isAllPaused,\n      totalFileCount: Object.keys(files).length,\n      totalProgress: state.totalProgress,\n      allowNewUpload: allowNewUpload,\n      acquirers: acquirers,\n      activePanel: pluginState.activePanel,\n      animateOpenClose: this.opts.animateOpenClose,\n      isClosing: pluginState.isClosing,\n      getPlugin: this.uppy.getPlugin,\n      progressindicators: progressindicators,\n      autoProceed: this.uppy.opts.autoProceed,\n      id: this.id,\n      closeModal: this.requestCloseModal,\n      handleClickOutside: this.handleClickOutside,\n      handleInputChange: this.handleInputChange,\n      handlePaste: this.handlePaste,\n      inline: this.opts.inline,\n      showPanel: this.showPanel,\n      hideAllPanels: this.hideAllPanels,\n      log: this.uppy.log,\n      i18n: this.i18n,\n      i18nArray: this.i18nArray,\n      addFile: this.uppy.addFile,\n      removeFile: this.uppy.removeFile,\n      info: this.uppy.info,\n      note: this.opts.note,\n      metaFields: pluginState.metaFields,\n      resumableUploads: capabilities.resumableUploads || false,\n      bundled: capabilities.bundled || false,\n      startUpload: startUpload,\n      pauseUpload: this.uppy.pauseResume,\n      retryUpload: this.uppy.retryUpload,\n      cancelUpload: cancelUpload,\n      cancelAll: this.uppy.cancelAll,\n      fileCardFor: pluginState.fileCardFor,\n      toggleFileCard: this.toggleFileCard,\n      toggleAddFilesPanel: this.toggleAddFilesPanel,\n      showAddFilesPanel: pluginState.showAddFilesPanel,\n      saveFileCard: saveFileCard,\n      width: this.opts.width,\n      height: this.opts.height,\n      showLinkToFileUploadResult: this.opts.showLinkToFileUploadResult,\n      proudlyDisplayPoweredByUppy: this.opts.proudlyDisplayPoweredByUppy,\n      currentWidth: pluginState.containerWidth,\n      isWide: pluginState.containerWidth > 400,\n      containerWidth: pluginState.containerWidth,\n      isTargetDOMEl: this.isTargetDOMEl,\n      allowedFileTypes: this.uppy.opts.restrictions.allowedFileTypes,\n      maxNumberOfFiles: this.uppy.opts.restrictions.maxNumberOfFiles,\n      showSelectedFiles: this.opts.showSelectedFiles\n    });\n  };\n\n  Dashboard.prototype.discoverProviderPlugins = function discoverProviderPlugins() {\n    var _this10 = this;\n\n    this.uppy.iteratePlugins(function (plugin) {\n      if (plugin && !plugin.target && plugin.opts && plugin.opts.target === _this10.constructor) {\n        _this10.addTarget(plugin);\n      }\n    });\n  };\n\n  Dashboard.prototype.install = function install() {\n    var _this11 = this; // Set default state for Dashboard\n\n\n    this.setPluginState({\n      isHidden: true,\n      showFileCard: false,\n      showAddFilesPanel: false,\n      activePanel: false,\n      metaFields: this.opts.metaFields,\n      targets: []\n    });\n    var _opts = this.opts,\n        inline = _opts.inline,\n        closeAfterFinish = _opts.closeAfterFinish;\n\n    if (inline && closeAfterFinish) {\n      throw new Error('[Dashboard] `closeAfterFinish: true` cannot be used on an inline Dashboard, because an inline Dashboard cannot be closed at all. Either set `inline: false`, or disable the `closeAfterFinish` option.');\n    }\n\n    var allowMultipleUploads = this.uppy.opts.allowMultipleUploads;\n\n    if (allowMultipleUploads && closeAfterFinish) {\n      this.uppy.log('[Dashboard] When using `closeAfterFinish`, we recommended setting the `allowMultipleUploads` option to `false` in the Uppy constructor. See https://uppy.io/docs/uppy/#allowMultipleUploads-true', 'warning');\n    }\n\n    var target = this.opts.target;\n\n    if (target) {\n      this.mount(target, this);\n    }\n\n    var plugins = this.opts.plugins || [];\n    plugins.forEach(function (pluginID) {\n      var plugin = _this11.uppy.getPlugin(pluginID);\n\n      if (plugin) {\n        plugin.mount(_this11, plugin);\n      }\n    });\n\n    if (!this.opts.disableStatusBar) {\n      this.uppy.use(StatusBar, {\n        id: this.id + ':StatusBar',\n        target: this,\n        hideUploadButton: this.opts.hideUploadButton,\n        hideRetryButton: this.opts.hideRetryButton,\n        hidePauseResumeButton: this.opts.hidePauseResumeButton,\n        hideCancelButton: this.opts.hideCancelButton,\n        showProgressDetails: this.opts.showProgressDetails,\n        hideAfterFinish: this.opts.hideProgressAfterFinish,\n        locale: this.opts.locale\n      });\n    }\n\n    if (!this.opts.disableInformer) {\n      this.uppy.use(Informer, {\n        id: this.id + ':Informer',\n        target: this\n      });\n    }\n\n    if (!this.opts.disableThumbnailGenerator) {\n      this.uppy.use(ThumbnailGenerator, {\n        id: this.id + ':ThumbnailGenerator',\n        thumbnailWidth: this.opts.thumbnailWidth\n      });\n    }\n\n    this.discoverProviderPlugins();\n    this.initEvents();\n  };\n\n  Dashboard.prototype.uninstall = function uninstall() {\n    var _this12 = this;\n\n    if (!this.opts.disableInformer) {\n      var informer = this.uppy.getPlugin(this.id + ':Informer'); // Checking if this plugin exists, in case it was removed by uppy-core\n      // before the Dashboard was.\n\n      if (informer) this.uppy.removePlugin(informer);\n    }\n\n    if (!this.opts.disableStatusBar) {\n      var statusBar = this.uppy.getPlugin(this.id + ':StatusBar');\n      if (statusBar) this.uppy.removePlugin(statusBar);\n    }\n\n    if (!this.opts.disableThumbnailGenerator) {\n      var thumbnail = this.uppy.getPlugin(this.id + ':ThumbnailGenerator');\n      if (thumbnail) this.uppy.removePlugin(thumbnail);\n    }\n\n    var plugins = this.opts.plugins || [];\n    plugins.forEach(function (pluginID) {\n      var plugin = _this12.uppy.getPlugin(pluginID);\n\n      if (plugin) plugin.unmount();\n    });\n    this.unmount();\n    this.removeEvents();\n  };\n\n  return Dashboard;\n}(Plugin);","map":null,"metadata":{},"sourceType":"script"}