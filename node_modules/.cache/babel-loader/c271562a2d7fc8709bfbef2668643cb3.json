{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _require = require('@uppy/core'),\n    Plugin = _require.Plugin;\n\nvar toArray = require('@uppy/utils/lib/toArray');\n\nvar Translator = require('@uppy/utils/lib/Translator');\n\nvar _require2 = require('preact'),\n    h = _require2.h;\n\nmodule.exports = function (_Plugin) {\n  _inherits(FileInput, _Plugin);\n\n  function FileInput(uppy, opts) {\n    _classCallCheck(this, FileInput);\n\n    var _this = _possibleConstructorReturn(this, _Plugin.call(this, uppy, opts));\n\n    _this.id = _this.opts.id || 'FileInput';\n    _this.title = 'File Input';\n    _this.type = 'acquirer';\n    var defaultLocale = {\n      strings: {\n        chooseFiles: 'Choose files' // Default options\n\n      }\n    };\n    var defaultOptions = {\n      target: null,\n      pretty: true,\n      inputName: 'files[]',\n      locale: defaultLocale // Merge default options with the ones set by user\n\n    };\n    _this.opts = _extends({}, defaultOptions, opts); // i18n\n\n    _this.translator = new Translator([defaultLocale, _this.uppy.locale, _this.opts.locale]);\n    _this.i18n = _this.translator.translate.bind(_this.translator);\n    _this.i18nArray = _this.translator.translateArray.bind(_this.translator);\n    _this.render = _this.render.bind(_this);\n    _this.handleInputChange = _this.handleInputChange.bind(_this);\n    _this.handleClick = _this.handleClick.bind(_this);\n    return _this;\n  }\n\n  FileInput.prototype.handleInputChange = function handleInputChange(ev) {\n    var _this2 = this;\n\n    this.uppy.log('[FileInput] Something selected through input...');\n    var files = toArray(ev.target.files);\n    files.forEach(function (file) {\n      try {\n        _this2.uppy.addFile({\n          source: _this2.id,\n          name: file.name,\n          type: file.type,\n          data: file\n        });\n      } catch (err) {// Nothing, restriction errors handled in Core\n      }\n    });\n  };\n\n  FileInput.prototype.handleClick = function handleClick(ev) {\n    this.input.click();\n  };\n\n  FileInput.prototype.render = function render(state) {\n    var _this3 = this;\n    /* http://tympanus.net/codrops/2015/09/15/styling-customizing-file-inputs-smart-way/ */\n\n\n    var hiddenInputStyle = {\n      width: '0.1px',\n      height: '0.1px',\n      opacity: 0,\n      overflow: 'hidden',\n      position: 'absolute',\n      zIndex: -1\n    };\n    var restrictions = this.uppy.opts.restrictions;\n    var accept = restrictions.allowedFileTypes ? restrictions.allowedFileTypes.join(',') : null; // empty value=\"\" on file input, so that the input is cleared after a file is selected,\n    // because Uppy will be handling the upload and so we can select same file\n    // after removing — otherwise browser thinks it’s already selected\n\n    return h('div', {\n      'class': 'uppy-Root uppy-FileInput-container'\n    }, h('input', {\n      'class': 'uppy-FileInput-input',\n      style: this.opts.pretty && hiddenInputStyle,\n      type: 'file',\n      name: this.opts.inputName,\n      onchange: this.handleInputChange,\n      multiple: restrictions.maxNumberOfFiles !== 1,\n      accept: accept,\n      ref: function ref(input) {\n        _this3.input = input;\n      },\n      value: ''\n    }), this.opts.pretty && h('button', {\n      'class': 'uppy-FileInput-btn',\n      type: 'button',\n      onclick: this.handleClick\n    }, this.i18n('chooseFiles')));\n  };\n\n  FileInput.prototype.install = function install() {\n    var target = this.opts.target;\n\n    if (target) {\n      this.mount(target, this);\n    }\n  };\n\n  FileInput.prototype.uninstall = function uninstall() {\n    this.unmount();\n  };\n\n  return FileInput;\n}(Plugin);","map":null,"metadata":{},"sourceType":"script"}