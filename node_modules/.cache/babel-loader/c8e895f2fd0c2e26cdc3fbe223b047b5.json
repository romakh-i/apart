{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * A Barebones HTTP API client for Transloadit.\n */\n\n\nmodule.exports = function () {\n  function Client() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Client);\n\n    this.opts = opts;\n  }\n  /**\n   * Create a new assembly.\n   *\n   * @param {object} options\n   */\n\n\n  Client.prototype.createAssembly = function createAssembly(_ref) {\n    var templateId = _ref.templateId,\n        params = _ref.params,\n        fields = _ref.fields,\n        signature = _ref.signature,\n        expectedFiles = _ref.expectedFiles;\n    var data = new FormData();\n    data.append('params', typeof params === 'string' ? params : JSON.stringify(params));\n\n    if (signature) {\n      data.append('signature', signature);\n    }\n\n    Object.keys(fields).forEach(function (key) {\n      data.append(key, fields[key]);\n    });\n    data.append('num_expected_upload_files', expectedFiles);\n    return fetch(this.opts.service + '/assemblies', {\n      method: 'post',\n      body: data\n    }).then(function (response) {\n      return response.json();\n    }).then(function (assembly) {\n      if (assembly.error) {\n        var error = new Error(assembly.error);\n        error.message = assembly.error;\n        error.details = assembly.reason;\n        throw error;\n      }\n\n      return assembly;\n    });\n  };\n\n  Client.prototype.reserveFile = function reserveFile(assembly, file) {\n    var size = encodeURIComponent(file.size);\n    return fetch(assembly.assembly_ssl_url + '/reserve_file?size=' + size, {\n      method: 'post'\n    }).then(function (response) {\n      return response.json();\n    });\n  };\n\n  Client.prototype.addFile = function addFile(assembly, file) {\n    if (!file.uploadURL) {\n      return Promise.reject(new Error('File does not have an `uploadURL`.'));\n    }\n\n    var size = encodeURIComponent(file.size);\n    var url = encodeURIComponent(file.uploadURL);\n    var filename = encodeURIComponent(file.name);\n    var fieldname = 'file';\n    var qs = 'size=' + size + '&filename=' + filename + '&fieldname=' + fieldname + '&s3Url=' + url;\n    return fetch(assembly.assembly_ssl_url + '/add_file?' + qs, {\n      method: 'post'\n    }).then(function (response) {\n      return response.json();\n    });\n  };\n  /**\n   * Get the current status for an assembly.\n   *\n   * @param {string} url The status endpoint of the assembly.\n   */\n\n\n  Client.prototype.getAssemblyStatus = function getAssemblyStatus(url) {\n    return fetch(url).then(function (response) {\n      return response.json();\n    });\n  };\n\n  return Client;\n}();","map":null,"metadata":{},"sourceType":"script"}