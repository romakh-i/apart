{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar ActionBrowseTagline = require('./ActionBrowseTagline');\n\nvar _require = require('./icons'),\n    localIcon = _require.localIcon;\n\nvar _require2 = require('preact'),\n    h = _require2.h,\n    Component = _require2.Component;\n\nvar poweredByUppy = function poweredByUppy(props) {\n  return h('a', {\n    tabindex: '-1',\n    href: 'https://uppy.io',\n    rel: 'noreferrer noopener',\n    target: '_blank',\n    'class': 'uppy-Dashboard-poweredBy'\n  }, 'Powered by ', h('svg', {\n    'aria-hidden': 'true',\n    'class': 'UppyIcon uppy-Dashboard-poweredByIcon',\n    width: '11',\n    height: '11',\n    viewBox: '0 0 11 11',\n    xmlns: 'http://www.w3.org/2000/svg'\n  }, h('path', {\n    d: 'M7.365 10.5l-.01-4.045h2.612L5.5.806l-4.467 5.65h2.604l.01 4.044h3.718z',\n    'fill-rule': 'evenodd'\n  })), h('span', {\n    'class': 'uppy-Dashboard-poweredByUppy'\n  }, 'Uppy'));\n};\n\nvar AddFiles = function (_Component) {\n  _inherits(AddFiles, _Component);\n\n  function AddFiles(props) {\n    _classCallCheck(this, AddFiles);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.handleClick = _this.handleClick.bind(_this);\n    return _this;\n  }\n\n  AddFiles.prototype.handleClick = function handleClick(ev) {\n    this.input.click();\n  };\n\n  AddFiles.prototype.render = function render() {\n    var _this2 = this; // const isHidden = Object.keys(this.props.files).length === 0\n\n\n    var hasAcquirers = this.props.acquirers.length !== 0;\n\n    if (!hasAcquirers) {\n      return h('div', {\n        'class': 'uppy-DashboarAddFiles'\n      }, h('div', {\n        'class': 'uppy-DashboardTabs'\n      }, h(ActionBrowseTagline, {\n        acquirers: this.props.acquirers,\n        handleInputChange: this.props.handleInputChange,\n        i18n: this.props.i18n,\n        i18nArray: this.props.i18nArray,\n        allowedFileTypes: this.props.allowedFileTypes,\n        maxNumberOfFiles: this.props.maxNumberOfFiles\n      })), h('div', {\n        'class': 'uppy-DashboarAddFiles-info'\n      }, this.props.note && h('div', {\n        'class': 'uppy-Dashboard-note'\n      }, this.props.note), this.props.proudlyDisplayPoweredByUppy && poweredByUppy(this.props)));\n    } // empty value=\"\" on file input, so that the input is cleared after a file is selected,\n    // because Uppy will be handling the upload and so we can select same file\n    // after removing — otherwise browser thinks it’s already selected\n\n\n    return h('div', {\n      'class': 'uppy-DashboarAddFiles'\n    }, h('div', {\n      'class': 'uppy-DashboardTabs'\n    }, h(ActionBrowseTagline, {\n      acquirers: this.props.acquirers,\n      handleInputChange: this.props.handleInputChange,\n      i18n: this.props.i18n,\n      i18nArray: this.props.i18nArray,\n      allowedFileTypes: this.props.allowedFileTypes,\n      maxNumberOfFiles: this.props.maxNumberOfFiles\n    }), h('div', {\n      'class': 'uppy-DashboardTabs-list',\n      role: 'tablist'\n    }, h('div', {\n      'class': 'uppy-DashboardTab',\n      role: 'presentation'\n    }, h('button', {\n      type: 'button',\n      'class': 'uppy-DashboardTab-btn',\n      role: 'tab',\n      tabindex: 0,\n      onclick: this.handleClick\n    }, localIcon(), h('div', {\n      'class': 'uppy-DashboardTab-name'\n    }, this.props.i18n('myDevice'))), h('input', {\n      'class': 'uppy-Dashboard-input',\n      hidden: true,\n      'aria-hidden': 'true',\n      tabindex: -1,\n      type: 'file',\n      name: 'files[]',\n      multiple: this.props.maxNumberOfFiles !== 1,\n      accept: this.props.allowedFileTypes,\n      onchange: this.props.handleInputChange,\n      value: '',\n      ref: function ref(input) {\n        _this2.input = input;\n      }\n    })), this.props.acquirers.map(function (target) {\n      return h('div', {\n        'class': 'uppy-DashboardTab',\n        role: 'presentation'\n      }, h('button', {\n        'class': 'uppy-DashboardTab-btn',\n        type: 'button',\n        role: 'tab',\n        tabindex: 0,\n        'aria-controls': 'uppy-DashboardContent-panel--' + target.id,\n        'aria-selected': _this2.props.activePanel.id === target.id,\n        onclick: function onclick() {\n          return _this2.props.showPanel(target.id);\n        }\n      }, target.icon(), h('div', {\n        'class': 'uppy-DashboardTab-name'\n      }, target.name)));\n    }))), h('div', {\n      'class': 'uppy-DashboarAddFiles-info'\n    }, this.props.note && h('div', {\n      'class': 'uppy-Dashboard-note'\n    }, this.props.note), this.props.proudlyDisplayPoweredByUppy && poweredByUppy(this.props)));\n  };\n\n  return AddFiles;\n}(Component);\n\nmodule.exports = AddFiles;","map":null,"metadata":{},"sourceType":"script"}