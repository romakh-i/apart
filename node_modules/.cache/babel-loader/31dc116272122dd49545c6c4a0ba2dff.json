{"ast":null,"code":"\"use strict\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSource = getSource;\n\nvar _isReactNative = require(\"./isReactNative\");\n\nvar _isReactNative2 = _interopRequireDefault(_isReactNative);\n\nvar _uriToBlob = require(\"./uriToBlob\");\n\nvar _uriToBlob2 = _interopRequireDefault(_uriToBlob);\n\nvar _isCordova = require(\"./isCordova\");\n\nvar _isCordova2 = _interopRequireDefault(_isCordova);\n\nvar _readAsByteArray = require(\"./readAsByteArray\");\n\nvar _readAsByteArray2 = _interopRequireDefault(_readAsByteArray);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar FileSource = function () {\n  function FileSource(file) {\n    _classCallCheck(this, FileSource);\n\n    this._file = file;\n    this.size = file.size;\n  }\n\n  _createClass(FileSource, [{\n    key: \"slice\",\n    value: function slice(start, end, callback) {\n      // In Apache Cordova applications, a File must be resolved using\n      // FileReader instances, see\n      // https://cordova.apache.org/docs/en/8.x/reference/cordova-plugin-file/index.html#read-a-file\n      if ((0, _isCordova2.default)()) {\n        (0, _readAsByteArray2.default)(this._file.slice(start, end), function (err, chunk) {\n          if (err) return callback(err);\n          callback(null, chunk);\n        });\n        return;\n      }\n\n      callback(null, this._file.slice(start, end));\n    }\n  }, {\n    key: \"close\",\n    value: function close() {}\n  }]);\n\n  return FileSource;\n}();\n\nvar StreamSource = function () {\n  function StreamSource(reader, chunkSize) {\n    _classCallCheck(this, StreamSource);\n\n    this._chunkSize = chunkSize;\n    this._buffer = undefined;\n    this._bufferOffset = 0;\n    this._reader = reader;\n    this._done = false;\n  }\n\n  _createClass(StreamSource, [{\n    key: \"slice\",\n    value: function slice(start, end, callback) {\n      if (start < this._bufferOffset) {\n        callback(new Error(\"Requested data is before the reader's current offset\"));\n        return;\n      }\n\n      return this._readUntilEnoughDataOrDone(start, end, callback);\n    }\n  }, {\n    key: \"_readUntilEnoughDataOrDone\",\n    value: function _readUntilEnoughDataOrDone(start, end, callback) {\n      var _this = this;\n\n      var hasEnoughData = end <= this._bufferOffset + len(this._buffer);\n\n      if (this._done || hasEnoughData) {\n        var value = this._getDataFromBuffer(start, end);\n\n        callback(null, value);\n        return;\n      }\n\n      this._reader.read().then(function (_ref) {\n        var value = _ref.value;\n        var done = _ref.done;\n\n        if (done) {\n          _this._done = true;\n        } else if (_this._buffer === undefined) {\n          _this._buffer = value;\n        } else {\n          _this._buffer = concat(_this._buffer, value);\n        }\n\n        _this._readUntilEnoughDataOrDone(start, end, callback);\n      }).catch(function (err) {\n        callback(new Error(\"Error during read: \" + err));\n      });\n    }\n  }, {\n    key: \"_getDataFromBuffer\",\n    value: function _getDataFromBuffer(start, end) {\n      // Remove data from buffer before `start`.\n      // Data might be reread from the buffer if an upload fails, so we can only\n      // safely delete data when it comes *before* what is currently being read.\n      if (start > this._bufferOffset) {\n        this._buffer = this._buffer.slice(start - this._bufferOffset);\n        this._bufferOffset = start;\n      } // If the buffer is empty after removing old data, all data has been read.\n\n\n      var hasAllDataBeenRead = len(this._buffer) === 0;\n\n      if (this._done && hasAllDataBeenRead) {\n        return null;\n      } // We already removed data before `start`, so we just return the first\n      // chunk from the buffer.\n\n\n      return this._buffer.slice(0, end - start);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._reader.cancel) {\n        this._reader.cancel();\n      }\n    }\n  }]);\n\n  return StreamSource;\n}();\n\nfunction len(blobOrArray) {\n  if (blobOrArray === undefined) return 0;\n  if (blobOrArray.size !== undefined) return blobOrArray.size;\n  return blobOrArray.length;\n}\n/*\n  Typed arrays and blobs don't have a concat method.\n  This function helps StreamSource accumulate data to reach chunkSize.\n*/\n\n\nfunction concat(a, b) {\n  if (a.concat) {\n    // Is `a` an Array?\n    return a.concat(b);\n  }\n\n  if (a instanceof Blob) {\n    return new Blob([a, b], {\n      type: a.type\n    });\n  }\n\n  if (a.set) {\n    // Is `a` a typed array?\n    var c = new a.constructor(a.length + b.length);\n    c.set(a);\n    c.set(b, a.length);\n    return c;\n  }\n\n  throw new Error(\"Unknown data type\");\n}\n\nfunction getSource(input, chunkSize, callback) {\n  // In React Native, when user selects a file, instead of a File or Blob,\n  // you usually get a file object {} with a uri property that contains\n  // a local path to the file. We use XMLHttpRequest to fetch\n  // the file blob, before uploading with tus.\n  // TODO: The __tus__forceReactNative property is currently used to force\n  // a React Native environment during testing. This should be removed\n  // once we move away from PhantomJS and can overwrite navigator.product\n  // properly.\n  if ((_isReactNative2.default || window.__tus__forceReactNative) && input && typeof input.uri !== \"undefined\") {\n    (0, _uriToBlob2.default)(input.uri, function (err, blob) {\n      if (err) {\n        return callback(new Error(\"tus: cannot fetch `file.uri` as Blob, make sure the uri is correct and accessible. \" + err));\n      }\n\n      callback(null, new FileSource(blob));\n    });\n    return;\n  } // Since we emulate the Blob type in our tests (not all target browsers\n  // support it), we cannot use `instanceof` for testing whether the input value\n  // can be handled. Instead, we simply check is the slice() function and the\n  // size property are available.\n\n\n  if (typeof input.slice === \"function\" && typeof input.size !== \"undefined\") {\n    callback(null, new FileSource(input));\n    return;\n  }\n\n  if (typeof input.read === \"function\") {\n    chunkSize = +chunkSize;\n\n    if (!isFinite(chunkSize)) {\n      callback(new Error(\"cannot create source for stream without a finite value for the `chunkSize` option\"));\n      return;\n    }\n\n    callback(null, new StreamSource(input, chunkSize));\n    return;\n  }\n\n  callback(new Error(\"source object may only be an instance of File, Blob, or Reader in this environment\"));\n}","map":null,"metadata":{},"sourceType":"script"}