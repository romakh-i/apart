{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar throttle = require('lodash.throttle');\n\nvar classNames = require('classnames');\n\nvar statusBarStates = require('./StatusBarStates');\n\nvar prettyBytes = require('prettier-bytes');\n\nvar prettyETA = require('@uppy/utils/lib/prettyETA');\n\nvar _require = require('preact'),\n    h = _require.h;\n\nfunction calculateProcessingProgress(files) {\n  // Collect pre or postprocessing progress states.\n  var progresses = [];\n  Object.keys(files).forEach(function (fileID) {\n    var progress = files[fileID].progress;\n\n    if (progress.preprocess) {\n      progresses.push(progress.preprocess);\n    }\n\n    if (progress.postprocess) {\n      progresses.push(progress.postprocess);\n    }\n  }); // In the future we should probably do this differently. For now we'll take the\n  // mode and message from the first fileâ€¦\n\n  var _progresses$ = progresses[0],\n      mode = _progresses$.mode,\n      message = _progresses$.message;\n  var value = progresses.filter(isDeterminate).reduce(function (total, progress, index, all) {\n    return total + progress.value / all.length;\n  }, 0);\n\n  function isDeterminate(progress) {\n    return progress.mode === 'determinate';\n  }\n\n  return {\n    mode: mode,\n    message: message,\n    value: value\n  };\n}\n\nfunction togglePauseResume(props) {\n  if (props.isAllComplete) return;\n\n  if (!props.resumableUploads) {\n    return props.cancelAll();\n  }\n\n  if (props.isAllPaused) {\n    return props.resumeAll();\n  }\n\n  return props.pauseAll();\n}\n\nmodule.exports = function (props) {\n  props = props || {};\n  var _props = props,\n      newFiles = _props.newFiles,\n      allowNewUpload = _props.allowNewUpload,\n      isUploadInProgress = _props.isUploadInProgress,\n      isAllPaused = _props.isAllPaused,\n      resumableUploads = _props.resumableUploads,\n      error = _props.error,\n      hideUploadButton = _props.hideUploadButton,\n      hidePauseResumeButton = _props.hidePauseResumeButton,\n      hideCancelButton = _props.hideCancelButton,\n      hideRetryButton = _props.hideRetryButton;\n  var uploadState = props.uploadState;\n  var progressValue = props.totalProgress;\n  var progressMode = void 0;\n  var progressBarContent = void 0;\n\n  if (uploadState === statusBarStates.STATE_PREPROCESSING || uploadState === statusBarStates.STATE_POSTPROCESSING) {\n    var progress = calculateProcessingProgress(props.files);\n    progressMode = progress.mode;\n\n    if (progressMode === 'determinate') {\n      progressValue = progress.value * 100;\n    }\n\n    progressBarContent = ProgressBarProcessing(progress);\n  } else if (uploadState === statusBarStates.STATE_COMPLETE) {\n    progressBarContent = ProgressBarComplete(props);\n  } else if (uploadState === statusBarStates.STATE_UPLOADING) {\n    if (!props.supportsUploadProgress) {\n      progressMode = 'indeterminate';\n      progressValue = null;\n    }\n\n    progressBarContent = ProgressBarUploading(props);\n  } else if (uploadState === statusBarStates.STATE_ERROR) {\n    progressValue = undefined;\n    progressBarContent = ProgressBarError(props);\n  }\n\n  var width = typeof progressValue === 'number' ? progressValue : 100;\n  var isHidden = uploadState === statusBarStates.STATE_WAITING && props.hideUploadButton || uploadState === statusBarStates.STATE_WAITING && !props.newFiles > 0 || uploadState === statusBarStates.STATE_COMPLETE && props.hideAfterFinish;\n  var showUploadBtn = !error && newFiles && !isUploadInProgress && !isAllPaused && allowNewUpload && !hideUploadButton;\n  var showCancelBtn = !hideCancelButton && uploadState !== statusBarStates.STATE_WAITING && uploadState !== statusBarStates.STATE_COMPLETE;\n  var showPauseResumeBtn = resumableUploads && !hidePauseResumeButton && uploadState !== statusBarStates.STATE_WAITING && uploadState !== statusBarStates.STATE_PREPROCESSING && uploadState !== statusBarStates.STATE_POSTPROCESSING && uploadState !== statusBarStates.STATE_COMPLETE;\n  var showRetryBtn = error && !hideRetryButton;\n  var progressClassNames = 'uppy-StatusBar-progress\\n                           ' + (progressMode ? 'is-' + progressMode : '');\n  var statusBarClassNames = classNames({\n    'uppy-Root': props.isTargetDOMEl\n  }, 'uppy-StatusBar', 'is-' + uploadState);\n  return h('div', {\n    'class': statusBarClassNames,\n    'aria-hidden': isHidden\n  }, h('div', {\n    'class': progressClassNames,\n    style: {\n      width: width + '%'\n    },\n    role: 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    'aria-valuenow': progressValue\n  }), progressBarContent, h('div', {\n    'class': 'uppy-StatusBar-actions'\n  }, showUploadBtn ? h(UploadBtn, _extends({}, props, {\n    uploadState: uploadState\n  })) : null, showRetryBtn ? h(RetryBtn, props) : null, showPauseResumeBtn ? h(PauseResumeButton, props) : null, showCancelBtn ? h(CancelBtn, props) : null));\n};\n\nvar UploadBtn = function UploadBtn(props) {\n  var uploadBtnClassNames = classNames('uppy-u-reset', 'uppy-c-btn', 'uppy-StatusBar-actionBtn', 'uppy-StatusBar-actionBtn--upload', {\n    'uppy-c-btn-primary': props.uploadState === statusBarStates.STATE_WAITING\n  });\n  return h('button', {\n    type: 'button',\n    'class': uploadBtnClassNames,\n    'aria-label': props.i18n('uploadXFiles', {\n      smart_count: props.newFiles\n    }),\n    onclick: props.startUpload\n  }, props.newFiles && props.isUploadStarted ? props.i18n('uploadXNewFiles', {\n    smart_count: props.newFiles\n  }) : props.i18n('uploadXFiles', {\n    smart_count: props.newFiles\n  }));\n};\n\nvar RetryBtn = function RetryBtn(props) {\n  return h('button', {\n    type: 'button',\n    'class': 'uppy-u-reset uppy-c-btn uppy-StatusBar-actionBtn uppy-StatusBar-actionBtn--retry',\n    'aria-label': props.i18n('retryUpload'),\n    onclick: props.retryAll\n  }, props.i18n('retry'));\n};\n\nvar CancelBtn = function CancelBtn(props) {\n  return h('button', {\n    type: 'button',\n    'class': 'uppy-u-reset uppy-StatusBar-actionCircleBtn',\n    title: props.i18n('cancel'),\n    'aria-label': props.i18n('cancel'),\n    onclick: props.cancelAll\n  }, h('svg', {\n    'aria-hidden': 'true',\n    'class': 'UppyIcon',\n    width: '16',\n    height: '16',\n    viewBox: '0 0 16 16',\n    xmlns: 'http://www.w3.org/2000/svg'\n  }, h('path', {\n    d: 'M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zm1.414-8l2.122-2.121-1.415-1.415L8 6.586 5.879 4.464 4.464 5.88 6.586 8l-2.122 2.121 1.415 1.415L8 9.414l2.121 2.122 1.415-1.415L9.414 8z',\n    fill: '#949494',\n    'fill-rule': 'evenodd'\n  })));\n};\n\nvar PauseResumeButton = function PauseResumeButton(props) {\n  var isAllPaused = props.isAllPaused,\n      i18n = props.i18n;\n  var title = isAllPaused ? i18n('resume') : i18n('pause');\n  return h('button', {\n    title: title,\n    'aria-label': title,\n    'class': 'uppy-u-reset uppy-StatusBar-actionCircleBtn',\n    type: 'button',\n    onclick: function onclick() {\n      return togglePauseResume(props);\n    }\n  }, isAllPaused ? h('svg', {\n    'aria-hidden': 'true',\n    'class': 'UppyIcon',\n    width: '16',\n    height: '16',\n    viewBox: '0 0 16 16',\n    xmlns: 'http://www.w3.org/2000/svg'\n  }, h('path', {\n    d: 'M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zM6 5v6l5-3-5-3z',\n    fill: '#949494',\n    'fill-rule': 'evenodd'\n  })) : h('svg', {\n    'aria-hidden': 'true',\n    'class': 'UppyIcon',\n    width: '16',\n    height: '16',\n    viewBox: '0 0 16 16',\n    xmlns: 'http://www.w3.org/2000/svg'\n  }, h('path', {\n    d: 'M8 16A8 8 0 1 1 8 0a8 8 0 0 1 0 16zM5 5v6h2V5H5zm4 0v6h2V5H9z',\n    fill: '#949494',\n    'fill-rule': 'evenodd'\n  })));\n};\n\nvar LoadingSpinner = function LoadingSpinner(props) {\n  return h('svg', {\n    'class': 'uppy-StatusBar-spinner',\n    width: '14',\n    height: '14',\n    xmlns: 'http://www.w3.org/2000/svg'\n  }, h('path', {\n    d: 'M13.983 6.547c-.12-2.509-1.64-4.893-3.939-5.936-2.48-1.127-5.488-.656-7.556 1.094C.524 3.367-.398 6.048.162 8.562c.556 2.495 2.46 4.52 4.94 5.183 2.932.784 5.61-.602 7.256-3.015-1.493 1.993-3.745 3.309-6.298 2.868-2.514-.434-4.578-2.349-5.153-4.84a6.226 6.226 0 0 1 2.98-6.778C6.34.586 9.74 1.1 11.373 3.493c.407.596.693 1.282.842 1.988.127.598.073 1.197.161 1.794.078.525.543 1.257 1.15.864.525-.341.49-1.05.456-1.592-.007-.15.02.3 0 0',\n    'fill-rule': 'evenodd'\n  }));\n};\n\nvar ProgressBarProcessing = function ProgressBarProcessing(props) {\n  var value = Math.round(props.value * 100);\n  return h('div', {\n    'class': 'uppy-StatusBar-content'\n  }, h(LoadingSpinner, props), props.mode === 'determinate' ? value + '% \\xB7 ' : '', props.message);\n};\n\nvar ProgressDetails = function ProgressDetails(props) {\n  return h('div', {\n    'class': 'uppy-StatusBar-statusSecondary'\n  }, props.numUploads > 1 && props.i18n('filesUploadedOfTotal', {\n    complete: props.complete,\n    smart_count: props.numUploads\n  }) + ' \\xB7 ', props.i18n('dataUploadedOfTotal', {\n    complete: prettyBytes(props.totalUploadedSize),\n    total: prettyBytes(props.totalSize)\n  }) + ' \\xB7 ', props.i18n('xTimeLeft', {\n    time: prettyETA(props.totalETA)\n  }));\n};\n\nvar UnknownProgressDetails = function UnknownProgressDetails(props) {\n  return h('div', {\n    'class': 'uppy-StatusBar-statusSecondary'\n  }, props.i18n('filesUploadedOfTotal', {\n    complete: props.complete,\n    smart_count: props.numUploads\n  }));\n};\n\nvar UploadNewlyAddedFiles = function UploadNewlyAddedFiles(props) {\n  var uploadBtnClassNames = classNames('uppy-u-reset', 'uppy-c-btn', 'uppy-StatusBar-actionBtn');\n  return h('div', {\n    'class': 'uppy-StatusBar-statusSecondary'\n  }, h('div', {\n    'class': 'uppy-StatusBar-statusSecondaryHint'\n  }, props.i18n('xMoreFilesAdded', {\n    smart_count: props.newFiles\n  })), h('button', {\n    type: 'button',\n    'class': uploadBtnClassNames,\n    'aria-label': props.i18n('uploadXFiles', {\n      smart_count: props.newFiles\n    }),\n    onclick: props.startUpload\n  }, props.i18n('upload')));\n};\n\nvar ThrottledProgressDetails = throttle(ProgressDetails, 500, {\n  leading: true,\n  trailing: true\n});\n\nvar ProgressBarUploading = function ProgressBarUploading(props) {\n  if (!props.isUploadStarted || props.isAllComplete) {\n    return null;\n  }\n\n  var title = props.isAllPaused ? props.i18n('paused') : props.i18n('uploading');\n  var showUploadNewlyAddedFiles = props.newFiles && props.isUploadStarted;\n  return h('div', {\n    'class': 'uppy-StatusBar-content',\n    'aria-label': title,\n    title: title\n  }, !props.isAllPaused ? h(LoadingSpinner, props) : null, h('div', {\n    'class': 'uppy-StatusBar-status'\n  }, h('div', {\n    'class': 'uppy-StatusBar-statusPrimary'\n  }, props.supportsUploadProgress ? title + ': ' + props.totalProgress + '%' : title), !props.isAllPaused && !showUploadNewlyAddedFiles && props.showProgressDetails ? props.supportsUploadProgress ? h(ThrottledProgressDetails, props) : h(UnknownProgressDetails, props) : null, showUploadNewlyAddedFiles ? h(UploadNewlyAddedFiles, props) : null));\n};\n\nvar ProgressBarComplete = function ProgressBarComplete(_ref) {\n  var totalProgress = _ref.totalProgress,\n      i18n = _ref.i18n;\n  return h('div', {\n    'class': 'uppy-StatusBar-content',\n    role: 'status',\n    title: i18n('complete')\n  }, h('svg', {\n    'aria-hidden': 'true',\n    'class': 'uppy-StatusBar-statusIndicator UppyIcon',\n    width: '18',\n    height: '17',\n    viewBox: '0 0 23 17'\n  }, h('path', {\n    d: 'M8.944 17L0 7.865l2.555-2.61 6.39 6.525L20.41 0 23 2.645z'\n  })), i18n('complete'));\n};\n\nvar ProgressBarError = function ProgressBarError(_ref2) {\n  var error = _ref2.error,\n      retryAll = _ref2.retryAll,\n      hideRetryButton = _ref2.hideRetryButton,\n      i18n = _ref2.i18n;\n  return h('div', {\n    'class': 'uppy-StatusBar-content',\n    role: 'alert'\n  }, h('span', {\n    'class': 'uppy-StatusBar-contentPadding'\n  }, i18n('uploadFailed'), '.'), h('span', {\n    'class': 'uppy-StatusBar-details',\n    'aria-label': error,\n    'data-microtip-position': 'top',\n    'data-microtip-size': 'large',\n    role: 'tooltip'\n  }, '?'));\n};","map":null,"metadata":{},"sourceType":"script"}