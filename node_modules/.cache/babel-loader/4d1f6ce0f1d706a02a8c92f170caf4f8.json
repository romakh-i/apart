{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Check that Assembly parameters are present and include all required fields.\n */\n\n\nfunction validateParams(params) {\n  if (!params) {\n    throw new Error('Transloadit: The `params` option is required.');\n  }\n\n  if (typeof params === 'string') {\n    try {\n      params = JSON.parse(params);\n    } catch (err) {\n      // Tell the user that this is not an Uppy bug!\n      err.message = 'Transloadit: The `params` option is a malformed JSON string: ' + err.message;\n      throw err;\n    }\n  }\n\n  if (!params.auth || !params.auth.key) {\n    throw new Error('Transloadit: The `params.auth.key` option is required. ' + 'You can find your Transloadit API key at https://transloadit.com/account/api-settings.');\n  }\n}\n/**\n * Turn Transloadit plugin options and a list of files into a list of Assembly\n * options.\n */\n\n\nvar AssemblyOptions = function () {\n  function AssemblyOptions(files, opts) {\n    _classCallCheck(this, AssemblyOptions);\n\n    this.files = files;\n    this.opts = opts;\n  }\n  /**\n   * Normalize Uppy-specific Assembly option features to a Transloadit-\n   * compatible object.\n   */\n\n\n  AssemblyOptions.prototype._normalizeAssemblyOptions = function _normalizeAssemblyOptions(file, assemblyOptions) {\n    if (Array.isArray(assemblyOptions.fields)) {\n      var fieldNames = assemblyOptions.fields;\n      assemblyOptions.fields = {};\n      fieldNames.forEach(function (fieldName) {\n        assemblyOptions.fields[fieldName] = file.meta[fieldName];\n      });\n    }\n\n    if (!assemblyOptions.fields) {\n      assemblyOptions.fields = {};\n    }\n\n    return assemblyOptions;\n  };\n  /**\n   * Get Assembly options for a file.\n   */\n\n\n  AssemblyOptions.prototype._getAssemblyOptions = function _getAssemblyOptions(file) {\n    var _this = this;\n\n    var options = this.opts;\n    return Promise.resolve().then(function () {\n      return options.getAssemblyOptions(file, options);\n    }).then(function (assemblyOptions) {\n      return _this._normalizeAssemblyOptions(file, assemblyOptions);\n    }).then(function (assemblyOptions) {\n      validateParams(assemblyOptions.params);\n      return {\n        fileIDs: [file.id],\n        options: assemblyOptions\n      };\n    });\n  };\n  /**\n   * Combine Assemblies with the same options into a single Assembly for all the\n   * relevant files.\n   */\n\n\n  AssemblyOptions.prototype._dedupe = function _dedupe(list) {\n    var dedupeMap = Object.create(null);\n    list.forEach(function (_ref) {\n      var fileIDs = _ref.fileIDs,\n          options = _ref.options;\n      var id = JSON.stringify(options);\n\n      if (dedupeMap[id]) {\n        var _dedupeMap$id$fileIDs;\n\n        (_dedupeMap$id$fileIDs = dedupeMap[id].fileIDs).push.apply(_dedupeMap$id$fileIDs, fileIDs);\n      } else {\n        dedupeMap[id] = {\n          options: options,\n          fileIDs: [].concat(fileIDs)\n        };\n      }\n    });\n    return Object.keys(dedupeMap).map(function (id) {\n      return dedupeMap[id];\n    });\n  };\n  /**\n   * Generate a set of Assemblies that will handle the upload.\n   * Returns a Promise for an object with keys:\n   *  - fileIDs - an array of file IDs to add to this Assembly\n   *  - options - Assembly options\n   */\n\n\n  AssemblyOptions.prototype.build = function build() {\n    var _this2 = this;\n\n    var options = this.opts;\n\n    if (this.files.length > 0) {\n      return Promise.all(this.files.map(function (file) {\n        return _this2._getAssemblyOptions(file);\n      })).then(function (list) {\n        return _this2._dedupe(list);\n      });\n    }\n\n    if (options.alwaysRunAssembly) {\n      // No files, just generate one Assembly\n      return Promise.resolve(options.getAssemblyOptions(null, options)).then(function (assemblyOptions) {\n        validateParams(assemblyOptions.params);\n        return [{\n          fileIDs: _this2.files.map(function (file) {\n            return file.id;\n          }),\n          options: assemblyOptions\n        }];\n      });\n    } // If there are no files and we do not `alwaysRunAssembly`,\n    // don't do anything.\n\n\n    return Promise.resolve([]);\n  };\n\n  return AssemblyOptions;\n}();\n\nmodule.exports = AssemblyOptions;\nmodule.exports.validateParams = validateParams;","map":null,"metadata":{},"sourceType":"script"}