{"ast":null,"code":"var VNode = function VNode() {};\n\nvar options = {};\nvar stack = [];\nvar EMPTY_CHILDREN = [];\n\nfunction h(nodeName, attributes) {\n  var children = EMPTY_CHILDREN,\n      lastSimple,\n      child,\n      simple,\n      i;\n\n  for (i = arguments.length; i-- > 2;) {\n    stack.push(arguments[i]);\n  }\n\n  if (attributes && attributes.children != null) {\n    if (!stack.length) stack.push(attributes.children);\n    delete attributes.children;\n  }\n\n  while (stack.length) {\n    if ((child = stack.pop()) && child.pop !== undefined) {\n      for (i = child.length; i--;) {\n        stack.push(child[i]);\n      }\n    } else {\n      if (typeof child === 'boolean') child = null;\n\n      if (simple = typeof nodeName !== 'function') {\n        if (child == null) child = '';else if (typeof child === 'number') child = String(child);else if (typeof child !== 'string') simple = false;\n      }\n\n      if (simple && lastSimple) {\n        children[children.length - 1] += child;\n      } else if (children === EMPTY_CHILDREN) {\n        children = [child];\n      } else {\n        children.push(child);\n      }\n\n      lastSimple = simple;\n    }\n  }\n\n  var p = new VNode();\n  p.nodeName = nodeName;\n  p.children = children;\n  p.attributes = attributes == null ? undefined : attributes;\n  p.key = attributes == null ? undefined : attributes.key;\n  if (options.vnode !== undefined) options.vnode(p);\n  return p;\n}\n\nfunction extend(obj, props) {\n  for (var i in props) {\n    obj[i] = props[i];\n  }\n\n  return obj;\n}\n\nfunction applyRef(ref, value) {\n  if (ref != null) {\n    if (typeof ref == 'function') ref(value);else ref.current = value;\n  }\n}\n\nvar defer = typeof Promise == 'function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;\n\nfunction cloneElement(vnode, props) {\n  return h(vnode.nodeName, extend(extend({}, vnode.attributes), props), arguments.length > 2 ? [].slice.call(arguments, 2) : vnode.children);\n}\n\nvar IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;\nvar items = [];\n\nfunction enqueueRender(component) {\n  if (!component._dirty && (component._dirty = true) && items.push(component) == 1) {\n    (options.debounceRendering || defer)(rerender);\n  }\n}\n\nfunction rerender() {\n  var p;\n\n  while (p = items.pop()) {\n    if (p._dirty) renderComponent(p);\n  }\n}\n\nfunction isSameNodeType(node, vnode, hydrating) {\n  if (typeof vnode === 'string' || typeof vnode === 'number') {\n    return node.splitText !== undefined;\n  }\n\n  if (typeof vnode.nodeName === 'string') {\n    return !node._componentConstructor && isNamedNode(node, vnode.nodeName);\n  }\n\n  return hydrating || node._componentConstructor === vnode.nodeName;\n}\n\nfunction isNamedNode(node, nodeName) {\n  return node.normalizedNodeName === nodeName || node.nodeName.toLowerCase() === nodeName.toLowerCase();\n}\n\nfunction getNodeProps(vnode) {\n  var props = extend({}, vnode.attributes);\n  props.children = vnode.children;\n  var defaultProps = vnode.nodeName.defaultProps;\n\n  if (defaultProps !== undefined) {\n    for (var i in defaultProps) {\n      if (props[i] === undefined) {\n        props[i] = defaultProps[i];\n      }\n    }\n  }\n\n  return props;\n}\n\nfunction createNode(nodeName, isSvg) {\n  var node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);\n  node.normalizedNodeName = nodeName;\n  return node;\n}\n\nfunction removeNode(node) {\n  var parentNode = node.parentNode;\n  if (parentNode) parentNode.removeChild(node);\n}\n\nfunction setAccessor(node, name, old, value, isSvg) {\n  if (name === 'className') name = 'class';\n\n  if (name === 'key') {} else if (name === 'ref') {\n    applyRef(old, null);\n    applyRef(value, node);\n  } else if (name === 'class' && !isSvg) {\n    node.className = value || '';\n  } else if (name === 'style') {\n    if (!value || typeof value === 'string' || typeof old === 'string') {\n      node.style.cssText = value || '';\n    }\n\n    if (value && typeof value === 'object') {\n      if (typeof old !== 'string') {\n        for (var i in old) {\n          if (!(i in value)) node.style[i] = '';\n        }\n      }\n\n      for (var i in value) {\n        node.style[i] = typeof value[i] === 'number' && IS_NON_DIMENSIONAL.test(i) === false ? value[i] + 'px' : value[i];\n      }\n    }\n  } else if (name === 'dangerouslySetInnerHTML') {\n    if (value) node.innerHTML = value.__html || '';\n  } else if (name[0] == 'o' && name[1] == 'n') {\n    var useCapture = name !== (name = name.replace(/Capture$/, ''));\n    name = name.toLowerCase().substring(2);\n\n    if (value) {\n      if (!old) node.addEventListener(name, eventProxy, useCapture);\n    } else {\n      node.removeEventListener(name, eventProxy, useCapture);\n    }\n\n    (node._listeners || (node._listeners = {}))[name] = value;\n  } else if (name !== 'list' && name !== 'type' && !isSvg && name in node) {\n    try {\n      node[name] = value == null ? '' : value;\n    } catch (e) {}\n\n    if ((value == null || value === false) && name != 'spellcheck') node.removeAttribute(name);\n  } else {\n    var ns = isSvg && name !== (name = name.replace(/^xlink:?/, ''));\n\n    if (value == null || value === false) {\n      if (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase());else node.removeAttribute(name);\n    } else if (typeof value !== 'function') {\n      if (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value);else node.setAttribute(name, value);\n    }\n  }\n}\n\nfunction eventProxy(e) {\n  return this._listeners[e.type](options.event && options.event(e) || e);\n}\n\nvar mounts = [];\nvar diffLevel = 0;\nvar isSvgMode = false;\nvar hydrating = false;\n\nfunction flushMounts() {\n  var c;\n\n  while (c = mounts.shift()) {\n    if (options.afterMount) options.afterMount(c);\n    if (c.componentDidMount) c.componentDidMount();\n  }\n}\n\nfunction diff(dom, vnode, context, mountAll, parent, componentRoot) {\n  if (!diffLevel++) {\n    isSvgMode = parent != null && parent.ownerSVGElement !== undefined;\n    hydrating = dom != null && !('__preactattr_' in dom);\n  }\n\n  var ret = idiff(dom, vnode, context, mountAll, componentRoot);\n  if (parent && ret.parentNode !== parent) parent.appendChild(ret);\n\n  if (! --diffLevel) {\n    hydrating = false;\n    if (!componentRoot) flushMounts();\n  }\n\n  return ret;\n}\n\nfunction idiff(dom, vnode, context, mountAll, componentRoot) {\n  var out = dom,\n      prevSvgMode = isSvgMode;\n  if (vnode == null || typeof vnode === 'boolean') vnode = '';\n\n  if (typeof vnode === 'string' || typeof vnode === 'number') {\n    if (dom && dom.splitText !== undefined && dom.parentNode && (!dom._component || componentRoot)) {\n      if (dom.nodeValue != vnode) {\n        dom.nodeValue = vnode;\n      }\n    } else {\n      out = document.createTextNode(vnode);\n\n      if (dom) {\n        if (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n        recollectNodeTree(dom, true);\n      }\n    }\n\n    out['__preactattr_'] = true;\n    return out;\n  }\n\n  var vnodeName = vnode.nodeName;\n\n  if (typeof vnodeName === 'function') {\n    return buildComponentFromVNode(dom, vnode, context, mountAll);\n  }\n\n  isSvgMode = vnodeName === 'svg' ? true : vnodeName === 'foreignObject' ? false : isSvgMode;\n  vnodeName = String(vnodeName);\n\n  if (!dom || !isNamedNode(dom, vnodeName)) {\n    out = createNode(vnodeName, isSvgMode);\n\n    if (dom) {\n      while (dom.firstChild) {\n        out.appendChild(dom.firstChild);\n      }\n\n      if (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n      recollectNodeTree(dom, true);\n    }\n  }\n\n  var fc = out.firstChild,\n      props = out['__preactattr_'],\n      vchildren = vnode.children;\n\n  if (props == null) {\n    props = out['__preactattr_'] = {};\n\n    for (var a = out.attributes, i = a.length; i--;) {\n      props[a[i].name] = a[i].value;\n    }\n  }\n\n  if (!hydrating && vchildren && vchildren.length === 1 && typeof vchildren[0] === 'string' && fc != null && fc.splitText !== undefined && fc.nextSibling == null) {\n    if (fc.nodeValue != vchildren[0]) {\n      fc.nodeValue = vchildren[0];\n    }\n  } else if (vchildren && vchildren.length || fc != null) {\n    innerDiffNode(out, vchildren, context, mountAll, hydrating || props.dangerouslySetInnerHTML != null);\n  }\n\n  diffAttributes(out, vnode.attributes, props);\n  isSvgMode = prevSvgMode;\n  return out;\n}\n\nfunction innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {\n  var originalChildren = dom.childNodes,\n      children = [],\n      keyed = {},\n      keyedLen = 0,\n      min = 0,\n      len = originalChildren.length,\n      childrenLen = 0,\n      vlen = vchildren ? vchildren.length : 0,\n      j,\n      c,\n      f,\n      vchild,\n      child;\n\n  if (len !== 0) {\n    for (var i = 0; i < len; i++) {\n      var _child = originalChildren[i],\n          props = _child['__preactattr_'],\n          key = vlen && props ? _child._component ? _child._component.__key : props.key : null;\n\n      if (key != null) {\n        keyedLen++;\n        keyed[key] = _child;\n      } else if (props || (_child.splitText !== undefined ? isHydrating ? _child.nodeValue.trim() : true : isHydrating)) {\n        children[childrenLen++] = _child;\n      }\n    }\n  }\n\n  if (vlen !== 0) {\n    for (var i = 0; i < vlen; i++) {\n      vchild = vchildren[i];\n      child = null;\n      var key = vchild.key;\n\n      if (key != null) {\n        if (keyedLen && keyed[key] !== undefined) {\n          child = keyed[key];\n          keyed[key] = undefined;\n          keyedLen--;\n        }\n      } else if (min < childrenLen) {\n        for (j = min; j < childrenLen; j++) {\n          if (children[j] !== undefined && isSameNodeType(c = children[j], vchild, isHydrating)) {\n            child = c;\n            children[j] = undefined;\n            if (j === childrenLen - 1) childrenLen--;\n            if (j === min) min++;\n            break;\n          }\n        }\n      }\n\n      child = idiff(child, vchild, context, mountAll);\n      f = originalChildren[i];\n\n      if (child && child !== dom && child !== f) {\n        if (f == null) {\n          dom.appendChild(child);\n        } else if (child === f.nextSibling) {\n          removeNode(f);\n        } else {\n          dom.insertBefore(child, f);\n        }\n      }\n    }\n  }\n\n  if (keyedLen) {\n    for (var i in keyed) {\n      if (keyed[i] !== undefined) recollectNodeTree(keyed[i], false);\n    }\n  }\n\n  while (min <= childrenLen) {\n    if ((child = children[childrenLen--]) !== undefined) recollectNodeTree(child, false);\n  }\n}\n\nfunction recollectNodeTree(node, unmountOnly) {\n  var component = node._component;\n\n  if (component) {\n    unmountComponent(component);\n  } else {\n    if (node['__preactattr_'] != null) applyRef(node['__preactattr_'].ref, null);\n\n    if (unmountOnly === false || node['__preactattr_'] == null) {\n      removeNode(node);\n    }\n\n    removeChildren(node);\n  }\n}\n\nfunction removeChildren(node) {\n  node = node.lastChild;\n\n  while (node) {\n    var next = node.previousSibling;\n    recollectNodeTree(node, true);\n    node = next;\n  }\n}\n\nfunction diffAttributes(dom, attrs, old) {\n  var name;\n\n  for (name in old) {\n    if (!(attrs && attrs[name] != null) && old[name] != null) {\n      setAccessor(dom, name, old[name], old[name] = undefined, isSvgMode);\n    }\n  }\n\n  for (name in attrs) {\n    if (name !== 'children' && name !== 'innerHTML' && (!(name in old) || attrs[name] !== (name === 'value' || name === 'checked' ? dom[name] : old[name]))) {\n      setAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);\n    }\n  }\n}\n\nvar recyclerComponents = [];\n\nfunction createComponent(Ctor, props, context) {\n  var inst,\n      i = recyclerComponents.length;\n\n  if (Ctor.prototype && Ctor.prototype.render) {\n    inst = new Ctor(props, context);\n    Component.call(inst, props, context);\n  } else {\n    inst = new Component(props, context);\n    inst.constructor = Ctor;\n    inst.render = doRender;\n  }\n\n  while (i--) {\n    if (recyclerComponents[i].constructor === Ctor) {\n      inst.nextBase = recyclerComponents[i].nextBase;\n      recyclerComponents.splice(i, 1);\n      return inst;\n    }\n  }\n\n  return inst;\n}\n\nfunction doRender(props, state, context) {\n  return this.constructor(props, context);\n}\n\nfunction setComponentProps(component, props, renderMode, context, mountAll) {\n  if (component._disable) return;\n  component._disable = true;\n  component.__ref = props.ref;\n  component.__key = props.key;\n  delete props.ref;\n  delete props.key;\n\n  if (typeof component.constructor.getDerivedStateFromProps === 'undefined') {\n    if (!component.base || mountAll) {\n      if (component.componentWillMount) component.componentWillMount();\n    } else if (component.componentWillReceiveProps) {\n      component.componentWillReceiveProps(props, context);\n    }\n  }\n\n  if (context && context !== component.context) {\n    if (!component.prevContext) component.prevContext = component.context;\n    component.context = context;\n  }\n\n  if (!component.prevProps) component.prevProps = component.props;\n  component.props = props;\n  component._disable = false;\n\n  if (renderMode !== 0) {\n    if (renderMode === 1 || options.syncComponentUpdates !== false || !component.base) {\n      renderComponent(component, 1, mountAll);\n    } else {\n      enqueueRender(component);\n    }\n  }\n\n  applyRef(component.__ref, component);\n}\n\nfunction renderComponent(component, renderMode, mountAll, isChild) {\n  if (component._disable) return;\n  var props = component.props,\n      state = component.state,\n      context = component.context,\n      previousProps = component.prevProps || props,\n      previousState = component.prevState || state,\n      previousContext = component.prevContext || context,\n      isUpdate = component.base,\n      nextBase = component.nextBase,\n      initialBase = isUpdate || nextBase,\n      initialChildComponent = component._component,\n      skip = false,\n      snapshot = previousContext,\n      rendered,\n      inst,\n      cbase;\n\n  if (component.constructor.getDerivedStateFromProps) {\n    state = extend(extend({}, state), component.constructor.getDerivedStateFromProps(props, state));\n    component.state = state;\n  }\n\n  if (isUpdate) {\n    component.props = previousProps;\n    component.state = previousState;\n    component.context = previousContext;\n\n    if (renderMode !== 2 && component.shouldComponentUpdate && component.shouldComponentUpdate(props, state, context) === false) {\n      skip = true;\n    } else if (component.componentWillUpdate) {\n      component.componentWillUpdate(props, state, context);\n    }\n\n    component.props = props;\n    component.state = state;\n    component.context = context;\n  }\n\n  component.prevProps = component.prevState = component.prevContext = component.nextBase = null;\n  component._dirty = false;\n\n  if (!skip) {\n    rendered = component.render(props, state, context);\n\n    if (component.getChildContext) {\n      context = extend(extend({}, context), component.getChildContext());\n    }\n\n    if (isUpdate && component.getSnapshotBeforeUpdate) {\n      snapshot = component.getSnapshotBeforeUpdate(previousProps, previousState);\n    }\n\n    var childComponent = rendered && rendered.nodeName,\n        toUnmount,\n        base;\n\n    if (typeof childComponent === 'function') {\n      var childProps = getNodeProps(rendered);\n      inst = initialChildComponent;\n\n      if (inst && inst.constructor === childComponent && childProps.key == inst.__key) {\n        setComponentProps(inst, childProps, 1, context, false);\n      } else {\n        toUnmount = inst;\n        component._component = inst = createComponent(childComponent, childProps, context);\n        inst.nextBase = inst.nextBase || nextBase;\n        inst._parentComponent = component;\n        setComponentProps(inst, childProps, 0, context, false);\n        renderComponent(inst, 1, mountAll, true);\n      }\n\n      base = inst.base;\n    } else {\n      cbase = initialBase;\n      toUnmount = initialChildComponent;\n\n      if (toUnmount) {\n        cbase = component._component = null;\n      }\n\n      if (initialBase || renderMode === 1) {\n        if (cbase) cbase._component = null;\n        base = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, true);\n      }\n    }\n\n    if (initialBase && base !== initialBase && inst !== initialChildComponent) {\n      var baseParent = initialBase.parentNode;\n\n      if (baseParent && base !== baseParent) {\n        baseParent.replaceChild(base, initialBase);\n\n        if (!toUnmount) {\n          initialBase._component = null;\n          recollectNodeTree(initialBase, false);\n        }\n      }\n    }\n\n    if (toUnmount) {\n      unmountComponent(toUnmount);\n    }\n\n    component.base = base;\n\n    if (base && !isChild) {\n      var componentRef = component,\n          t = component;\n\n      while (t = t._parentComponent) {\n        (componentRef = t).base = base;\n      }\n\n      base._component = componentRef;\n      base._componentConstructor = componentRef.constructor;\n    }\n  }\n\n  if (!isUpdate || mountAll) {\n    mounts.push(component);\n  } else if (!skip) {\n    if (component.componentDidUpdate) {\n      component.componentDidUpdate(previousProps, previousState, snapshot);\n    }\n\n    if (options.afterUpdate) options.afterUpdate(component);\n  }\n\n  while (component._renderCallbacks.length) {\n    component._renderCallbacks.pop().call(component);\n  }\n\n  if (!diffLevel && !isChild) flushMounts();\n}\n\nfunction buildComponentFromVNode(dom, vnode, context, mountAll) {\n  var c = dom && dom._component,\n      originalComponent = c,\n      oldDom = dom,\n      isDirectOwner = c && dom._componentConstructor === vnode.nodeName,\n      isOwner = isDirectOwner,\n      props = getNodeProps(vnode);\n\n  while (c && !isOwner && (c = c._parentComponent)) {\n    isOwner = c.constructor === vnode.nodeName;\n  }\n\n  if (c && isOwner && (!mountAll || c._component)) {\n    setComponentProps(c, props, 3, context, mountAll);\n    dom = c.base;\n  } else {\n    if (originalComponent && !isDirectOwner) {\n      unmountComponent(originalComponent);\n      dom = oldDom = null;\n    }\n\n    c = createComponent(vnode.nodeName, props, context);\n\n    if (dom && !c.nextBase) {\n      c.nextBase = dom;\n      oldDom = null;\n    }\n\n    setComponentProps(c, props, 1, context, mountAll);\n    dom = c.base;\n\n    if (oldDom && dom !== oldDom) {\n      oldDom._component = null;\n      recollectNodeTree(oldDom, false);\n    }\n  }\n\n  return dom;\n}\n\nfunction unmountComponent(component) {\n  if (options.beforeUnmount) options.beforeUnmount(component);\n  var base = component.base;\n  component._disable = true;\n  if (component.componentWillUnmount) component.componentWillUnmount();\n  component.base = null;\n  var inner = component._component;\n\n  if (inner) {\n    unmountComponent(inner);\n  } else if (base) {\n    if (base['__preactattr_'] != null) applyRef(base['__preactattr_'].ref, null);\n    component.nextBase = base;\n    removeNode(base);\n    recyclerComponents.push(component);\n    removeChildren(base);\n  }\n\n  applyRef(component.__ref, null);\n}\n\nfunction Component(props, context) {\n  this._dirty = true;\n  this.context = context;\n  this.props = props;\n  this.state = this.state || {};\n  this._renderCallbacks = [];\n}\n\nextend(Component.prototype, {\n  setState: function setState(state, callback) {\n    if (!this.prevState) this.prevState = this.state;\n    this.state = extend(extend({}, this.state), typeof state === 'function' ? state(this.state, this.props) : state);\n    if (callback) this._renderCallbacks.push(callback);\n    enqueueRender(this);\n  },\n  forceUpdate: function forceUpdate(callback) {\n    if (callback) this._renderCallbacks.push(callback);\n    renderComponent(this, 2);\n  },\n  render: function render() {}\n});\n\nfunction render(vnode, parent, merge) {\n  return diff(merge, vnode, {}, false, parent, false);\n}\n\nfunction createRef() {\n  return {};\n}\n\nvar preact = {\n  h: h,\n  createElement: h,\n  cloneElement: cloneElement,\n  createRef: createRef,\n  Component: Component,\n  render: render,\n  rerender: rerender,\n  options: options\n};\nexport default preact;\nexport { h, h as createElement, cloneElement, createRef, Component, render, rerender, options };","map":null,"metadata":{},"sourceType":"module"}