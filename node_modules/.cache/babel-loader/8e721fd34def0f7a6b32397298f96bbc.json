{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar getFileNameAndExtension = require('@uppy/utils/lib/getFileNameAndExtension');\n\nvar truncateString = require('../utils/truncateString');\n\nvar copyToClipboard = require('../utils/copyToClipboard');\n\nvar prettyBytes = require('prettier-bytes');\n\nvar FileItemProgress = require('./FileItemProgress');\n\nvar getFileTypeIcon = require('../utils/getFileTypeIcon');\n\nvar FilePreview = require('./FilePreview');\n\nvar _require = require('./icons'),\n    iconCopy = _require.iconCopy,\n    iconRetry = _require.iconRetry;\n\nvar classNames = require('classnames');\n\nvar _require2 = require('preact'),\n    h = _require2.h;\n\nfunction FileItemProgressWrapper(props) {\n  if (props.hideRetryButton && props.error) {\n    return;\n  }\n\n  if (props.isUploaded || props.bundled || props.hidePauseResumeCancelButtons && !props.error) {\n    return h('div', {\n      'class': 'uppy-DashboardItem-progressIndicator'\n    }, h(FileItemProgress, {\n      progress: props.file.progress.percentage,\n      fileID: props.file.id,\n      hidePauseResumeCancelButtons: props.hidePauseResumeCancelButtons,\n      bundled: props.bundled\n    }));\n  }\n\n  return h('button', {\n    'class': 'uppy-DashboardItem-progressIndicator',\n    type: 'button',\n    'aria-label': props.progressIndicatorTitle,\n    title: props.progressIndicatorTitle,\n    onclick: props.onPauseResumeCancelRetry\n  }, props.error ? props.hideRetryButton ? null : iconRetry() : h(FileItemProgress, {\n    progress: props.file.progress.percentage,\n    fileID: props.file.id,\n    hidePauseResumeCancelButtons: props.hidePauseResumeCancelButtons\n  }));\n}\n\nmodule.exports = function fileItem(props) {\n  var file = props.file;\n  var acquirers = props.acquirers;\n  var isProcessing = file.progress.preprocess || file.progress.postprocess;\n  var isUploaded = file.progress.uploadComplete && !isProcessing && !file.error;\n  var uploadInProgressOrComplete = file.progress.uploadStarted || isProcessing;\n  var uploadInProgress = file.progress.uploadStarted && !file.progress.uploadComplete || isProcessing;\n  var isPaused = file.isPaused || false;\n  var error = file.error || false;\n  var fileName = getFileNameAndExtension(file.meta.name).name;\n  var truncatedFileName = props.isWide ? truncateString(fileName, 30) : fileName;\n\n  function onPauseResumeCancelRetry(ev) {\n    if (isUploaded) return;\n\n    if (error && !props.hideRetryButton) {\n      props.retryUpload(file.id);\n      return;\n    }\n\n    if (props.hidePauseResumeCancelButtons) {\n      return;\n    }\n\n    if (props.resumableUploads) {\n      props.pauseUpload(file.id);\n    } else {\n      props.cancelUpload(file.id);\n    }\n  }\n\n  function progressIndicatorTitle(props) {\n    if (isUploaded) {\n      return props.i18n('uploadComplete');\n    }\n\n    if (error) {\n      return props.i18n('retryUpload');\n    }\n\n    if (props.resumableUploads) {\n      if (file.isPaused) {\n        return props.i18n('resumeUpload');\n      }\n\n      return props.i18n('pauseUpload');\n    } else {\n      return props.i18n('cancelUpload');\n    }\n  }\n\n  var dashboardItemClass = classNames('uppy-DashboardItem', {\n    'is-inprogress': uploadInProgress\n  }, {\n    'is-processing': isProcessing\n  }, {\n    'is-complete': isUploaded\n  }, {\n    'is-paused': isPaused\n  }, {\n    'is-error': error\n  }, {\n    'is-resumable': props.resumableUploads\n  }, {\n    'is-bundled': props.bundledUpload\n  });\n  return h('li', {\n    'class': dashboardItemClass,\n    id: 'uppy_' + file.id,\n    title: file.meta.name\n  }, h('div', {\n    'class': 'uppy-DashboardItem-preview'\n  }, h('div', {\n    'class': 'uppy-DashboardItem-previewInnerWrap',\n    style: {\n      backgroundColor: getFileTypeIcon(file.type).color\n    }\n  }, props.showLinkToFileUploadResult && file.uploadURL ? h('a', {\n    'class': 'uppy-DashboardItem-previewLink',\n    href: file.uploadURL,\n    rel: 'noreferrer noopener',\n    target: '_blank'\n  }) : null, h(FilePreview, {\n    file: file\n  })), h('div', {\n    'class': 'uppy-DashboardItem-progress'\n  }, h(FileItemProgressWrapper, _extends({\n    progressIndicatorTitle: progressIndicatorTitle(props),\n    onPauseResumeCancelRetry: onPauseResumeCancelRetry,\n    file: file,\n    error: error\n  }, props)))), h('div', {\n    'class': 'uppy-DashboardItem-info'\n  }, h('div', {\n    'class': 'uppy-DashboardItem-name',\n    title: fileName\n  }, props.showLinkToFileUploadResult && file.uploadURL ? h('a', {\n    href: file.uploadURL,\n    rel: 'noreferrer noopener',\n    target: '_blank'\n  }, file.extension ? truncatedFileName + '.' + file.extension : truncatedFileName) : file.extension ? truncatedFileName + '.' + file.extension : truncatedFileName), h('div', {\n    'class': 'uppy-DashboardItem-status'\n  }, file.data.size ? h('div', {\n    'class': 'uppy-DashboardItem-statusSize'\n  }, prettyBytes(file.data.size)) : null, file.source && file.source !== props.id && h('div', {\n    'class': 'uppy-DashboardItem-sourceIcon'\n  }, acquirers.map(function (acquirer) {\n    if (acquirer.id === file.source) {\n      return h('span', {\n        title: props.i18n('fileSource', {\n          name: acquirer.name\n        })\n      }, acquirer.icon());\n    }\n  })), !uploadInProgressOrComplete && props.metaFields && props.metaFields.length ? h('button', {\n    'class': 'uppy-DashboardItem-edit',\n    type: 'button',\n    'aria-label': props.i18n('editFile'),\n    title: props.i18n('editFile'),\n    onclick: function onclick(e) {\n      return props.toggleFileCard(file.id);\n    }\n  }, props.i18n('edit')) : null, props.showLinkToFileUploadResult && file.uploadURL ? h('button', {\n    'class': 'uppy-DashboardItem-copyLink',\n    type: 'button',\n    'aria-label': props.i18n('copyLink'),\n    title: props.i18n('copyLink'),\n    onclick: function onclick() {\n      copyToClipboard(file.uploadURL, props.i18n('copyLinkToClipboardFallback')).then(function () {\n        props.log('Link copied to clipboard.');\n        props.info(props.i18n('copyLinkToClipboardSuccess'), 'info', 3000);\n      }).catch(props.log);\n    }\n  }, iconCopy()) : '')), h('div', {\n    'class': 'uppy-DashboardItem-action'\n  }, !isUploaded && h('button', {\n    'class': 'uppy-DashboardItem-remove',\n    type: 'button',\n    'aria-label': props.i18n('removeFile'),\n    title: props.i18n('removeFile'),\n    onclick: function onclick() {\n      return props.removeFile(file.id);\n    }\n  }, h('svg', {\n    'aria-hidden': 'true',\n    'class': 'UppyIcon',\n    width: '60',\n    height: '60',\n    viewBox: '0 0 60 60',\n    xmlns: 'http://www.w3.org/2000/svg'\n  }, h('path', {\n    stroke: '#FFF',\n    'stroke-width': '1',\n    'fill-rule': 'nonzero',\n    'vector-effect': 'non-scaling-stroke',\n    d: 'M30 1C14 1 1 14 1 30s13 29 29 29 29-13 29-29S46 1 30 1z'\n  }), h('path', {\n    fill: '#FFF',\n    'vector-effect': 'non-scaling-stroke',\n    d: 'M42 39.667L39.667 42 30 32.333 20.333 42 18 39.667 27.667 30 18 20.333 20.333 18 30 27.667 39.667 18 42 20.333 32.333 30z'\n  })))));\n};","map":null,"metadata":{},"sourceType":"script"}