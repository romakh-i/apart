{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('preact')) : typeof define === 'function' && define.amd ? define(['preact'], factory) : global.PreactCSSTransitionGroup = factory(global.preact);\n})(this, function (preact) {\n  'use strict';\n\n  function getKey(vnode) {\n    return vnode.attributes && vnode.attributes.key;\n  }\n\n  function getComponentBase(component) {\n    return component.base;\n  }\n\n  function onlyChild(children) {\n    return children && children[0];\n  }\n\n  function filterNullChildren(children) {\n    return children && children.filter(function (i) {\n      return i !== null;\n    });\n  }\n\n  function find(arr, iter) {\n    for (var i = arr.length; i--;) {\n      if (iter(arr[i])) return true;\n    }\n\n    return false;\n  }\n\n  function inChildrenByKey(children, key) {\n    return find(children, function (c) {\n      return getKey(c) === key;\n    });\n  }\n\n  function inChildren(children, child) {\n    return inChildrenByKey(children, getKey(child));\n  }\n\n  function isShownInChildrenByKey(children, key, showProp) {\n    return find(children, function (c) {\n      return getKey(c) === key && c.props[showProp];\n    });\n  }\n\n  function isShownInChildren(children, child, showProp) {\n    return isShownInChildrenByKey(children, getKey(child), showProp);\n  }\n\n  function mergeChildMappings(prev, next) {\n    var ret = [];\n    var nextChildrenPending = {},\n        pendingChildren = [];\n    prev.forEach(function (c) {\n      var key = getKey(c);\n\n      if (inChildrenByKey(next, key)) {\n        if (pendingChildren.length) {\n          nextChildrenPending[key] = pendingChildren;\n          pendingChildren = [];\n        }\n      } else {\n        pendingChildren.push(c);\n      }\n    });\n    next.forEach(function (c) {\n      var key = getKey(c);\n\n      if (nextChildrenPending.hasOwnProperty(key)) {\n        ret = ret.concat(nextChildrenPending[key]);\n      }\n\n      ret.push(c);\n    });\n    return ret.concat(pendingChildren);\n  }\n\n  var SPACE = ' ';\n  var RE_CLASS = /[\\n\\t\\r]+/g;\n\n  var norm = function norm(elemClass) {\n    return (SPACE + elemClass + SPACE).replace(RE_CLASS, SPACE);\n  };\n\n  function addClass(elem, className) {\n    if (elem.classList) {\n      var _elem$classList;\n\n      (_elem$classList = elem.classList).add.apply(_elem$classList, className.split(' '));\n    } else {\n      elem.className += ' ' + className;\n    }\n  }\n\n  function removeClass(elem, needle) {\n    needle = needle.trim();\n\n    if (elem.classList) {\n      var _elem$classList2;\n\n      (_elem$classList2 = elem.classList).remove.apply(_elem$classList2, needle.split(' '));\n    } else {\n      var elemClass = elem.className.trim();\n      var className = norm(elemClass);\n      needle = SPACE + needle + SPACE;\n\n      while (className.indexOf(needle) >= 0) {\n        className = className.replace(needle, SPACE);\n      }\n\n      elem.className = className.trim();\n    }\n  }\n\n  var EVENT_NAME_MAP = {\n    transitionend: {\n      transition: 'transitionend',\n      WebkitTransition: 'webkitTransitionEnd',\n      MozTransition: 'mozTransitionEnd',\n      OTransition: 'oTransitionEnd',\n      msTransition: 'MSTransitionEnd'\n    },\n    animationend: {\n      animation: 'animationend',\n      WebkitAnimation: 'webkitAnimationEnd',\n      MozAnimation: 'mozAnimationEnd',\n      OAnimation: 'oAnimationEnd',\n      msAnimation: 'MSAnimationEnd'\n    }\n  };\n  var endEvents = [];\n\n  function detectEvents() {\n    var testEl = document.createElement('div'),\n        style = testEl.style;\n\n    if (!('AnimationEvent' in window)) {\n      delete EVENT_NAME_MAP.animationend.animation;\n    }\n\n    if (!('TransitionEvent' in window)) {\n      delete EVENT_NAME_MAP.transitionend.transition;\n    }\n\n    for (var baseEventName in EVENT_NAME_MAP) {\n      var baseEvents = EVENT_NAME_MAP[baseEventName];\n\n      for (var styleName in baseEvents) {\n        if (styleName in style) {\n          endEvents.push(baseEvents[styleName]);\n          break;\n        }\n      }\n    }\n  }\n\n  if (typeof window !== 'undefined') {\n    detectEvents();\n  }\n\n  function addEndEventListener(node, eventListener) {\n    if (!endEvents.length) {\n      return window.setTimeout(eventListener, 0);\n    }\n\n    endEvents.forEach(function (endEvent) {\n      node.addEventListener(endEvent, eventListener, false);\n    });\n  }\n\n  function removeEndEventListener(node, eventListener) {\n    if (!endEvents.length) return;\n    endEvents.forEach(function (endEvent) {\n      node.removeEventListener(endEvent, eventListener, false);\n    });\n  }\n\n  var classCallCheck = function classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  };\n\n  var inherits = function inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  };\n\n  var objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n    var target = {};\n\n    for (var i in obj) {\n      if (keys.indexOf(i) >= 0) continue;\n      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n      target[i] = obj[i];\n    }\n\n    return target;\n  };\n\n  var possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  };\n\n  var TICK = 17;\n\n  var CSSTransitionGroupChild = function (_Component) {\n    inherits(CSSTransitionGroupChild, _Component);\n\n    function CSSTransitionGroupChild() {\n      var _temp, _this, _ret;\n\n      classCallCheck(this, CSSTransitionGroupChild);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.flushClassNameQueue = function () {\n        if (getComponentBase(_this)) {\n          addClass(getComponentBase(_this), _this.classNameQueue.join(' '));\n        }\n\n        _this.classNameQueue.length = 0;\n        _this.timeout = null;\n      }, _temp), possibleConstructorReturn(_this, _ret);\n    }\n\n    CSSTransitionGroupChild.prototype.transition = function transition(animationType, finishCallback, timeout) {\n      var _this2 = this;\n\n      var node = getComponentBase(this);\n      var className = this.props.name[animationType] || this.props.name + '-' + animationType;\n      var activeClassName = this.props.name[animationType + 'Active'] || className + '-active';\n      var timer = null;\n\n      if (this.endListener) {\n        this.endListener();\n      }\n\n      this.endListener = function (e) {\n        if (e && e.target !== node) return;\n        clearTimeout(timer);\n        removeClass(node, className);\n        removeClass(node, activeClassName);\n        removeEndEventListener(node, _this2.endListener);\n        _this2.endListener = null;\n\n        if (finishCallback) {\n          finishCallback();\n        }\n      };\n\n      if (timeout) {\n        timer = setTimeout(this.endListener, timeout);\n        this.transitionTimeouts.push(timer);\n      } else {\n        addEndEventListener(node, this.endListener);\n      }\n\n      addClass(node, className);\n      this.queueClass(activeClassName);\n    };\n\n    CSSTransitionGroupChild.prototype.queueClass = function queueClass(className) {\n      this.classNameQueue.push(className);\n\n      if (!this.timeout) {\n        this.timeout = setTimeout(this.flushClassNameQueue, TICK);\n      }\n    };\n\n    CSSTransitionGroupChild.prototype.stop = function stop() {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n        this.classNameQueue.length = 0;\n        this.timeout = null;\n      }\n\n      if (this.endListener) {\n        this.endListener();\n      }\n    };\n\n    CSSTransitionGroupChild.prototype.componentWillMount = function componentWillMount() {\n      this.classNameQueue = [];\n      this.transitionTimeouts = [];\n    };\n\n    CSSTransitionGroupChild.prototype.componentWillUnmount = function componentWillUnmount() {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      this.transitionTimeouts.forEach(function (timeout) {\n        clearTimeout(timeout);\n      });\n    };\n\n    CSSTransitionGroupChild.prototype.componentWillEnter = function componentWillEnter(done) {\n      if (this.props.enter) {\n        this.transition('enter', done, this.props.enterTimeout);\n      } else {\n        done();\n      }\n    };\n\n    CSSTransitionGroupChild.prototype.componentWillLeave = function componentWillLeave(done) {\n      if (this.props.leave) {\n        this.transition('leave', done, this.props.leaveTimeout);\n      } else {\n        done();\n      }\n    };\n\n    CSSTransitionGroupChild.prototype.render = function render() {\n      return onlyChild(this.props.children);\n    };\n\n    return CSSTransitionGroupChild;\n  }(preact.Component);\n\n  var CSSTransitionGroup = function (_Component) {\n    inherits(CSSTransitionGroup, _Component);\n\n    function CSSTransitionGroup(props) {\n      classCallCheck(this, CSSTransitionGroup);\n\n      var _this = possibleConstructorReturn(this, _Component.call(this));\n\n      _this.renderChild = function (child) {\n        var _this$props = _this.props;\n        var transitionName = _this$props.transitionName;\n        var transitionEnter = _this$props.transitionEnter;\n        var transitionLeave = _this$props.transitionLeave;\n        var transitionEnterTimeout = _this$props.transitionEnterTimeout;\n        var transitionLeaveTimeout = _this$props.transitionLeaveTimeout;\n        var key = getKey(child);\n        return preact.h(CSSTransitionGroupChild, {\n          key: key,\n          ref: function ref(c) {\n            if (!(_this.refs[key] = c)) child = null;\n          },\n          name: transitionName,\n          enter: transitionEnter,\n          leave: transitionLeave,\n          enterTimeout: transitionEnterTimeout,\n          leaveTimeout: transitionLeaveTimeout\n        }, child);\n      };\n\n      _this.refs = {};\n      _this.state = {\n        children: (props.children || []).slice()\n      };\n      return _this;\n    }\n\n    CSSTransitionGroup.prototype.shouldComponentUpdate = function shouldComponentUpdate(_, _ref) {\n      var children = _ref.children;\n      return children !== this.state.children;\n    };\n\n    CSSTransitionGroup.prototype.componentWillMount = function componentWillMount() {\n      this.currentlyTransitioningKeys = {};\n      this.keysToEnter = [];\n      this.keysToLeave = [];\n    };\n\n    CSSTransitionGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(_ref2) {\n      var _this2 = this;\n\n      var children = _ref2.children;\n      var exclusive = _ref2.exclusive;\n      var showProp = _ref2.showProp;\n      var nextChildMapping = filterNullChildren(children || []).slice();\n      var prevChildMapping = filterNullChildren(exclusive ? this.props.children : this.state.children);\n      var newChildren = mergeChildMappings(prevChildMapping, nextChildMapping);\n\n      if (showProp) {\n        newChildren = newChildren.map(function (c) {\n          if (!c.props[showProp] && isShownInChildren(prevChildMapping, c, showProp)) {\n            var _cloneElement;\n\n            c = preact.cloneElement(c, (_cloneElement = {}, _cloneElement[showProp] = true, _cloneElement));\n          }\n\n          return c;\n        });\n      }\n\n      if (exclusive) {\n        newChildren.forEach(function (c) {\n          return _this2.stop(getKey(c));\n        });\n      }\n\n      this.setState({\n        children: newChildren\n      });\n      this.forceUpdate();\n      nextChildMapping.forEach(function (c) {\n        var key = c.key;\n        var hasPrev = prevChildMapping && inChildren(prevChildMapping, c);\n\n        if (showProp) {\n          if (hasPrev) {\n            var showInPrev = isShownInChildren(prevChildMapping, c, showProp),\n                showInNow = c.props[showProp];\n\n            if (!showInPrev && showInNow && !_this2.currentlyTransitioningKeys[key]) {\n              _this2.keysToEnter.push(key);\n            }\n          }\n        } else if (!hasPrev && !_this2.currentlyTransitioningKeys[key]) {\n          _this2.keysToEnter.push(key);\n        }\n      });\n      prevChildMapping.forEach(function (c) {\n        var key = c.key;\n        var hasNext = nextChildMapping && inChildren(nextChildMapping, c);\n\n        if (showProp) {\n          if (hasNext) {\n            var showInNext = isShownInChildren(nextChildMapping, c, showProp);\n            var showInNow = c.props[showProp];\n\n            if (!showInNext && showInNow && !_this2.currentlyTransitioningKeys[key]) {\n              _this2.keysToLeave.push(key);\n            }\n          }\n        } else if (!hasNext && !_this2.currentlyTransitioningKeys[key]) {\n          _this2.keysToLeave.push(key);\n        }\n      });\n    };\n\n    CSSTransitionGroup.prototype.performEnter = function performEnter(key) {\n      var _this3 = this;\n\n      this.currentlyTransitioningKeys[key] = true;\n      var component = this.refs[key];\n\n      if (component.componentWillEnter) {\n        component.componentWillEnter(function () {\n          return _this3._handleDoneEntering(key);\n        });\n      } else {\n        this._handleDoneEntering(key);\n      }\n    };\n\n    CSSTransitionGroup.prototype._handleDoneEntering = function _handleDoneEntering(key) {\n      delete this.currentlyTransitioningKeys[key];\n      var currentChildMapping = filterNullChildren(this.props.children),\n          showProp = this.props.showProp;\n\n      if (!currentChildMapping || !showProp && !inChildrenByKey(currentChildMapping, key) || showProp && !isShownInChildrenByKey(currentChildMapping, key, showProp)) {\n        this.performLeave(key);\n      } else {\n        this.setState({\n          children: currentChildMapping\n        });\n      }\n    };\n\n    CSSTransitionGroup.prototype.stop = function stop(key) {\n      delete this.currentlyTransitioningKeys[key];\n      var component = this.refs[key];\n      if (component) component.stop();\n    };\n\n    CSSTransitionGroup.prototype.performLeave = function performLeave(key) {\n      var _this4 = this;\n\n      this.currentlyTransitioningKeys[key] = true;\n      var component = this.refs[key];\n\n      if (component && component.componentWillLeave) {\n        component.componentWillLeave(function () {\n          return _this4._handleDoneLeaving(key);\n        });\n      } else {\n        this._handleDoneLeaving(key);\n      }\n    };\n\n    CSSTransitionGroup.prototype._handleDoneLeaving = function _handleDoneLeaving(key) {\n      delete this.currentlyTransitioningKeys[key];\n      var showProp = this.props.showProp,\n          currentChildMapping = filterNullChildren(this.props.children);\n\n      if (showProp && currentChildMapping && isShownInChildrenByKey(currentChildMapping, key, showProp)) {\n        this.performEnter(key);\n      } else if (!showProp && currentChildMapping && inChildrenByKey(currentChildMapping, key)) {\n        this.performEnter(key);\n      } else {\n        this.setState({\n          children: currentChildMapping\n        });\n      }\n    };\n\n    CSSTransitionGroup.prototype.componentDidUpdate = function componentDidUpdate() {\n      var _this5 = this;\n\n      var keysToEnter = this.keysToEnter;\n      var keysToLeave = this.keysToLeave;\n      this.keysToEnter = [];\n      keysToEnter.forEach(function (k) {\n        return _this5.performEnter(k);\n      });\n      this.keysToLeave = [];\n      keysToLeave.forEach(function (k) {\n        return _this5.performLeave(k);\n      });\n    };\n\n    CSSTransitionGroup.prototype.render = function render(_ref3, _ref4) {\n      var Component = _ref3.component;\n      var transitionName = _ref3.transitionName;\n      var transitionEnter = _ref3.transitionEnter;\n      var transitionLeave = _ref3.transitionLeave;\n      var transitionEnterTimeout = _ref3.transitionEnterTimeout;\n      var transitionLeaveTimeout = _ref3.transitionLeaveTimeout;\n      var c = _ref3.children;\n      var props = objectWithoutProperties(_ref3, ['component', 'transitionName', 'transitionEnter', 'transitionLeave', 'transitionEnterTimeout', 'transitionLeaveTimeout', 'children']);\n      var children = _ref4.children;\n      return preact.h(Component, props, filterNullChildren(children).map(this.renderChild));\n    };\n\n    return CSSTransitionGroup;\n  }(preact.Component);\n\n  CSSTransitionGroup.defaultProps = {\n    component: 'span',\n    transitionEnter: true,\n    transitionLeave: true\n  };\n  return CSSTransitionGroup;\n});","map":null,"metadata":{},"sourceType":"script"}