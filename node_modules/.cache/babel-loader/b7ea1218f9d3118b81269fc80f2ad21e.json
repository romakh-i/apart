{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar React = require('react');\n\nvar DragDropPlugin = require('@uppy/drag-drop');\n\nvar propTypes = require('./propTypes');\n\nvar h = React.createElement;\n/**\n * React component that renders an area in which files can be dropped to be\n * uploaded.\n */\n\nvar DragDrop = function (_React$Component) {\n  _inherits(DragDrop, _React$Component);\n\n  function DragDrop() {\n    _classCallCheck(this, DragDrop);\n\n    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));\n  }\n\n  DragDrop.prototype.componentDidMount = function componentDidMount() {\n    this.installPlugin();\n  };\n\n  DragDrop.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (prevProps.uppy !== this.props.uppy) {\n      this.uninstallPlugin(prevProps);\n      this.installPlugin();\n    }\n  };\n\n  DragDrop.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.uninstallPlugin();\n  };\n\n  DragDrop.prototype.installPlugin = function installPlugin() {\n    var uppy = this.props.uppy;\n\n    var options = _extends({\n      id: 'react:DragDrop'\n    }, this.props, {\n      target: this.container\n    });\n\n    delete options.uppy;\n    uppy.use(DragDropPlugin, options);\n    this.plugin = uppy.getPlugin(options.id);\n  };\n\n  DragDrop.prototype.uninstallPlugin = function uninstallPlugin() {\n    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n    var uppy = props.uppy;\n    uppy.removePlugin(this.plugin);\n  };\n\n  DragDrop.prototype.render = function render() {\n    var _this2 = this;\n\n    return h('div', {\n      ref: function ref(container) {\n        _this2.container = container;\n      }\n    });\n  };\n\n  return DragDrop;\n}(React.Component);\n\nDragDrop.propTypes = {\n  uppy: propTypes.uppy,\n  locale: propTypes.locale\n};\nDragDrop.defaultProps = {};\nmodule.exports = DragDrop;","map":null,"metadata":{},"sourceType":"script"}